[{"uri":"http://localhost:1313/getting-started/","title":"Getting started","tags":[],"description":"Getting started","content":"Table of contents Daptin is an open-source online database tool. Users can use this no-code platform to create a database without any technical experience. It lowers the barriers to app creation so that anyone who can work with a spreadsheet can also create a database. The interface looks a lot like a spreadsheet. Our goal is to provide a perfect and fast user experience while keeping it easy for developers to write plugins and maintain the codebase. The developer documentation contains several topics you might need as a developer.\nGetting started New to Daptin? This is the place to start.\nIntroduction: An introduction to some important concepts before using Daptin. API: An introduction to the REST API and information about API resources. WebSocket API: An introduction to the WebSockets API which is used to broad cast real time updates. Database plugin An introduction to the database plugin which is installed by default.  #Guides Need some help with setting things up?\nLocal demo: Run a local demo on your computer using docker-compose. Install on Ubuntu: A step by step guide on how to install Daptin on an Ubuntu server. Install on Cloudron: Instructions on how to manually install Daptin on Cloudron.  Development Everything related to contributing and developing for Daptin.\nDevelopment environment: Setting up your local development environment using docker-compose. Directory structure: The structure of all the directories in the Daptin repository explained. Tools: The tools (flake8, pytest, eslint, etc) and how to use them. Code quality: More information about the the code style, quality, choices we made, and how we enforce them.  Plugins Everything related to custom plugin development.\nPlugin basics: An introduction into Daptin plugins. Plugin boilerplate: Donâ€™t reinvent the wheel, use the boilerplate for quick plugin development. Create application: Want to create an application type? Learn how to do that here. Create database table view: Display table data like a calendar, Kanban board or however you like by creating a view type. Create database table view filter: Filter the rows of a view with custom conditions. Create database table field: You can store data in a custom format by creating a field type. Creata a field converter: Converters alter a field and convert the related data for specific field changes.  Accessing web dashboard Open up the dashboard on http://localhost:8080/\nYou will be presented with the Sign-in screen. If you are on a freshly created instance, then you need to create a user first.\nFirst user Use the dashboard to sign-up as the first user or call the sign-up API manually to create the first user. Users must create a password with at least 8 characters.\nAPI CALL\nAs you will see later in actions sign up and sign in api\u0026rsquo;s are nothing special but just actions defined on certain tables.\nRequest\ncurl \u0026#39;http://localhost/action/user_account/signup\u0026#39; --data \u0026#39;{\u0026#34;attributes\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;name\u0026#34;,\u0026#34;email\u0026#34;:\u0026#34;email@domain.com\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;password123\u0026#34;,\u0026#34;passwordConfirm\u0026#34;:\u0026#34;password123\u0026#34;}}\u0026#39; Response\n[{ \u0026#34;ResponseType\u0026#34;: \u0026#34;client.notify\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;Created user_account\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;success\u0026#34; } }, { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.notify\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;Created usergroup\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;success\u0026#34; } }, { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.notify\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;Created user_account_user_account_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;success\u0026#34; } }, { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.notify\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;__type\u0026#34;: \u0026#34;client.notify\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;Sign-up successful. Redirecting to sign in\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;success\u0026#34; } }, { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.redirect\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;__type\u0026#34;: \u0026#34;client.redirect\u0026#34;, \u0026#34;delay\u0026#34;: 2000, \u0026#34;location\u0026#34;: \u0026#34;/auth/signin\u0026#34;, \u0026#34;window\u0026#34;: \u0026#34;self\u0026#34; } }] Nothing important in the response of signup to keep track of.\nSuccessful response means now we can login as a user and become the administrator.\nA failure response would look like this:\n[{ \u0026#34;ResponseType\u0026#34;: \u0026#34;client.notify\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;Failed to create user_account. Error 1062: Duplicate entry \u0026#39;email@domain.com\u0026#39; for key \u0026#39;i79f4e12e72442d30f2b99a84fce3c392\u0026#39;\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Failed\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;error\u0026#34; } }] Or\n[{ \u0026#34;ResponseType\u0026#34;: \u0026#34;client.notify\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;http error (400) email and 0 more errors, invalid value for email\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;failed\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;error\u0026#34; } }] Logging in dashboard API CAll\nRequest\ncurl \u0026#39;http://localhost/action/user_account/signin\u0026#39; --data \u0026#39;{\u0026#34;attributes\u0026#34;:{\u0026#34;email\u0026#34;:\u0026#34;email@domain.com\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;password123\u0026#34;}}\u0026#39; Response\n[{ \u0026#34;ResponseType\u0026#34;: \u0026#34;client.store.set\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;token\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhckBnbWFpbC5jb20iLCJleHAiOjE1ODE2MTcxNTEsImlhdCI6IjIwMjAtMDItMTBUMjM6MzU6NTEuMTc2MjA5ODAxKzA1OjMwIiwiaXNzIjoiZGFwdGluLTNhZTI5ZCIsImp0aSI6IjQ4MTRkYjhhLTg1ZWEtNDc0ZS1iMWQ0LWQ5OGM4MTU5ZDU5MCIsIm5hbWUiOiJwYXJ0aCIsIm5iZiI6MTU4MTM1Nzk1MSwicGljdHVyZSI6Imh0dHBzOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIvM2M5MjI3NmI4NmMzNGJkNjZmZjQwMzFlNjNmM2JkZTdcdTAwMjZkPW1vbnN0ZXJpZCJ9.deocIlHXWH_2fsrYBx5lSGQVJxad044tj4j4amy2Zyk\u0026#34; } }, { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.cookie.set\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;token\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhckBnbWFpbC5jb20iLCJleHAiOjE1ODE2MTcxNTEsImlhdCI6IjIwMjAtMDItMTBUMjM6MzU6NTEuMTc2MjA5ODAxKzA1OjMwIiwiaXNzIjoiZGFwdGluLTNhZTI5ZCIsImp0aSI6IjQ4MTRkYjhhLTg1ZWEtNDc0ZS1iMWQ0LWQ5OGM4MTU5ZDU5MCIsIm5hbWUiOiJwYXJ0aCIsIm5iZiI6MTU4MTM1Nzk1MSwicGljdHVyZSI6Imh0dHBzOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIvM2M5MjI3NmI4NmMzNGJkNjZmZjQwMzFlNjNmM2JkZTdcdTAwMjZkPW1vbnN0ZXJpZCJ9.deocIlHXWH_2fsrYBx5lSGQVJxad044tj4j4amy2Zyk\u0026#34; } }, { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.notify\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;Logged in\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;success\u0026#34; } }, { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.redirect\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;delay\u0026#34;: 2000, \u0026#34;location\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;window\u0026#34;: \u0026#34;self\u0026#34; } }] The token is to be used in the Authorization header of for all HTTP calls to identify the user.\nBecome Administrator First user to sign up with automatically become an administrator. More administrators can be added.\n"},{"uri":"http://localhost:1313/apis/","title":"API Reference","tags":[],"description":"","content":"API reference Daptin exposes various endpoints for each entity defined in the schema:\n Create Find one Update Delete Find all Find relations Execute action Aggregate State management  All endpoints allow authentication using the Authorization Header.\nAPI Overview CRUD API Read/Create/Update/Delete\n   GET /api/{entityName} Query Params Request Body Description     GET /api/{entityName} page[size]= page[number] query filter  Detailed documentation   POST /api/{entityName}   Find all rows, paginated with query and filters Example   PATCH /api/{entityName}/{id}  {\u0026ldquo;attributes\u0026rdquo;: { \u0026hellip;{fields} } \u0026ldquo;type\u0026rdquo;: \u0026ldquo;{entityType} } Update row by reference id Example   PUT /api/{entityName}/{id}  {\u0026ldquo;attributes\u0026rdquo;: { } \u0026ldquo;type\u0026rdquo;: \u0026ldquo;{entityType} } Update row by reference id Example   DELETE /api/{entityName}/{id}   Delete a row Example    Action API    GET /action/{entityName}/{actionName} Query Params Request Body Description     POST /api/{entityName}/ action parameters Action Parameters Execute action    Relation APIs    Method Path Query params Request body Description     GET /api/{entityName}/{id}/{relationName} page[size]= page[number] query filter  Find all related rows by relation name, eg, \u0026ldquo;posts\u0026rdquo; of a user   DELETE /api/{entityName}/{id}/{relationName}  {\u0026ldquo;id\u0026rdquo;: , \u0026ldquo;type\u0026rdquo;: } Delete a related row, eg: delete post of a user. this only removes a relation and not the actual row.   GET /action/{entityName}/{actionName} Parameters for action  Invoke an action on an entity   POST /action/{entityName}/{actionName}  { \u0026ldquo;attribute\u0026rdquo;: { Parameters for action }, \u0026ldquo;id\u0026rdquo;: \u0026ldquo;\u0026lt; object id \u0026gt;\u0026rdquo; type: \u0026ldquo;\u0026lt; entity type \u0026gt;\u0026rdquo; } Invoke an action on an entity    Aggregate API    Method Path Query params Request body Description     GET /stats/{typeName} group/filter/join/column/timestamp/timefrom/timeto/order  Run aggregate function over entity table    State machine APIs Enabled for the entities for which you have enabled state machines\n   Method Path Query params Request body Description     POST /track/start/{stateMachineId}  { \u0026ldquo;id\u0026rdquo;: \u0026quot; \u0026lt; reference id \u0026gt;\u0026rdquo;, type: \u0026quot; \u0026lt; entity type \u0026gt; \u0026quot; } Start tracking according to the state machine for an object   POST /track/event/{typename}/{objectStateId}/{eventName}   Invoke an event on a particular track of the state machine for a object    Websocket API (wip) Listed to incoming updates to data over websocket live\n   Method Path Query params Request body Description     GET /live   Initiate a web socket connection    Metadata API Meatadata APIs expose information about the daptin server itself\n   Method Path Query params Request body Description     GET /apispec.raml   RAML Spec for all API\u0026rsquo;s exposed by the current instance   GET /ping   Replies with PONG, Endpoint for liveness probe   GET /statistics   Replies with PONG, Endpoint for healht check probe    Read Query Parameters    Name parameter type default value example value     page[number] integer 1 5   page[size] integer 10 100   query json base64 [] [{\u0026ldquo;column\u0026rdquo;: \u0026ldquo;name\u0026rdquo;, \u0026ldquo;operator\u0026rdquo;: \u0026ldquo;is\u0026rdquo;, \u0026ldquo;value\u0026rdquo;: \u0026ldquo;england\u0026rdquo;}]   group string - [{\u0026ldquo;column\u0026rdquo;: \u0026ldquo;name\u0026rdquo;, \u0026ldquo;order\u0026rdquo;: \u0026ldquo;desc\u0026rdquo;}]   included_relations comma separated string - user post author   sort comma seaparated string - created_at amount guest_count   filter string - england    Response !!! example \u0026ldquo;Response example\u0026rdquo; json { \u0026quot;links\u0026quot;: { \u0026quot;current_page\u0026quot;: 1, \u0026quot;from\u0026quot;: 0, \u0026quot;last_page\u0026quot;: 1, \u0026quot;per_page\u0026quot;: 10, \u0026quot;to\u0026quot;: 10, \u0026quot;total\u0026quot;: 1 }, \u0026quot;data\u0026quot;: [{ \u0026quot;type\u0026quot;: \u0026quot;book\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;29d11cb3-3fad-4972-bf3b-9cfc6da9e6a6\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;__type\u0026quot;: \u0026quot;book\u0026quot;, \u0026quot;confirmed\u0026quot;: 0, \u0026quot;created_at\u0026quot;: \u0026quot;2018-04-05 15:47:29\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;book title\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;book name\u0026quot;, \u0026quot;permission\u0026quot;: 127127127, \u0026quot;reference_id\u0026quot;: \u0026quot;29d11cb3-3fad-4972-bf3b-9cfc6da9e6a6\u0026quot;, \u0026quot;updated_at\u0026quot;: null, \u0026quot;user_id\u0026quot;: \u0026quot;696c98d3-3b8b-41da-a510-08e6948cf661\u0026quot; }, \u0026quot;relationships\u0026quot;: { \u0026quot;author_id\u0026quot;: { \u0026quot;links\u0026quot;: { \u0026quot;related\u0026quot;: \u0026quot;/api/book/\u0026lt;book-id/author_id\u0026quot;, \u0026quot;self\u0026quot;: \u0026quot;/api/book/\u0026lt;book-id\u0026gt;/relationships/author_id\u0026quot; }, \u0026quot;data\u0026quot;: [] } } }] }\nExamples Curl example curl '/api/\u0026lt;entityName\u0026gt;?sort=\u0026amp;page[number]=1\u0026amp;page[size]=10' \\ -H 'Authorization: Bearer \u0026lt;AccessToken\u0026gt;'  jQuery ajax example $.ajax({ method: \u0026quot;GET\u0026quot;, url: '/api/\u0026lt;entityName\u0026gt;?sort=\u0026amp;page[number]=1\u0026amp;page[size]=10', success: function(response){ console.log(response.data); } })  Node js example var request = require('request'); var headers = { 'Authorization': 'Bearer \u0026lt;AccessToken\u0026gt;' }; var options = { url: '/api/\u0026lt;entityName\u0026gt;?sort=\u0026amp;page[number]=1\u0026amp;page[size]=10', headers: headers }; function callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { console.log(body); } } request(options, callback);  Python example import requests headers = { 'Authorization': 'Bearer \u0026lt;AccessToken\u0026gt;', } params = ( ('sort', '-created_at'), ('page[number]', '1'), ('page[size]', '10'), ) response = requests.get('http://localhost:6336/api/laptop', headers=headers, params=params)  PHP example \u0026lt;?php include('vendor/rmccue/requests/library/Requests.php'); Requests::register_autoloader(); $headers = array( 'Authorization' =\u0026gt; 'Bearer \u0026lt;AccessToken\u0026gt;' ); $response = Requests::get('http://localhost:6336/api/laptop?sort=\u0026amp;page[number]=1\u0026amp;page[size]=10', $headers);  Filtering Used to search items in a table that matche the filter\u0026rsquo;s conditions. Filters follow the syntax query=[{\u0026quot;column\u0026quot;: \u0026quot;\u0026lt;column_name\u0026gt;\u0026quot;, \u0026quot;operator\u0026quot;: \u0026quot;\u0026lt;compare-operator\u0026gt;\u0026quot;, \u0026quot;value\u0026quot;:\u0026quot;\u0026lt;value\u0026gt;\u0026quot;}]\n   Daptin operator SQL compare operator     contains like \u0026lsquo;%\u0026lt;value\u0026gt;\u0026rsquo;   not contains not like \u0026lsquo;%\u0026lt;value\u0026gt;\u0026rsquo;   is =   is not !=   before \u0026lt;   less then \u0026lt;   after \u0026gt;   more then \u0026gt;   any of in   none of not in   is empty is null   is not empty is not null    Example curl '/api/world?query=[{\u0026quot;column\u0026quot;: \u0026quot;is_hidden\u0026quot;, \u0026quot;operator\u0026quot;: \u0026quot;any of\u0026quot;, \u0026quot;value\u0026quot;:\u0026quot;1,0\u0026quot;}] \\ -H 'Authorization: Bearer \u0026lt;AccessToken\u0026gt;'  Create !!! example \u0026ldquo;Curl Example\u0026rdquo; curl curl '/api/\u0026lt;EntityName\u0026gt;' -H 'Authorization: Bearer \u0026lt;Token\u0026gt;' --data-binary '{ \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;EntityName\u0026gt;\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;name\u0026quot; } } }'\n!!! example \u0026ldquo;Nodejs example\u0026rdquo; ```nodejs var request = require(\u0026lsquo;request\u0026rsquo;);\n var headers = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;', }; var dataString = '{ \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;EntityName\u0026gt;\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;name\u0026quot; } } }'; var options = { url: '/api/\u0026lt;EntityName\u0026gt;', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { console.log(body); } } request(options, callback); ```  !!! example \u0026ldquo;Python example\u0026rdquo; ```python import requests\n headers = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;', } data = '{ \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;EntityName\u0026gt;\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;name\u0026quot; } } }' response = requests.post('/api/\u0026lt;EntityName\u0026gt;', headers=headers, data=data) ```  !!! example \u0026ldquo;PHP Example\u0026rdquo; php \u0026lt;?php include('vendor/rmccue/requests/library/Requests.php'); Requests::register_autoloader(); $headers = array( 'Authorization' =\u0026gt; 'Bearer \u0026lt;Token\u0026gt;', ); $data = '{ \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;EntityName\u0026gt;\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;name\u0026quot; } } }'; $response = Requests::post('/api/\u0026lt;EntityName\u0026gt;', $headers, $data);\nUpdate !!! example \u0026ldquo;Curl example\u0026rdquo; curl curl '/api/\u0026lt;EntityName\u0026gt;/\u0026lt;ReferenceId\u0026gt;' \\ -X PATCH \\ -H 'Authorization: Bearer \u0026lt;Token\u0026gt;' \\ --data-binary '{ \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;EntityName\u0026gt;\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;confirmed\u0026quot;: false, \u0026quot;email\u0026quot;: \u0026quot;update@gmail.com\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;new name\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;\u0026quot; }, \u0026quot;id\u0026quot;: \u0026quot;\u0026lt;ReferenceId\u0026gt;\u0026quot; } }'\n!!! example \u0026ldquo;Nodejs example\u0026rdquo; ```nodejs var request = require(\u0026lsquo;request\u0026rsquo;);\nvar headers = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;' }; var dataString = '{ \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;EntityName\u0026gt;\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;confirmed\u0026quot;: false, \u0026quot;email\u0026quot;: \u0026quot;update@gmail.com\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;new name\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;permission\u0026quot;: 127127127, }, \u0026quot;relationships\u0026quot;: { \u0026quot;relation_name\u0026quot;: [ ... ] }, \u0026quot;id\u0026quot;: \u0026quot;\u0026lt;ReferenceId\u0026gt;\u0026quot; } }'; var options = { url: '/api/\u0026lt;EntityName\u0026gt;/\u0026lt;ReferenceId\u0026gt;', method: 'PATCH', headers: headers, body: dataString }; function callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { console.log(body); } } request(options, callback); ```  !!! example \u0026ldquo;Python example\u0026rdquo; ```python import requests\nheaders = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;', } data = '{ \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;EntityName\u0026gt;\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;confirmed\u0026quot;: false, \u0026quot;email\u0026quot;: \u0026quot;update@gmail.com\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;new name\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;permission\u0026quot;: 127127127, }, \u0026quot;relationships\u0026quot;: { \u0026quot;relation_name\u0026quot;: [ ... ] }, \u0026quot;id\u0026quot;: \u0026quot;\u0026lt;ReferenceId\u0026gt;\u0026quot; } }' response = requests.patch('/api/\u0026lt;EntityName\u0026gt;/\u0026lt;ReferenceId\u0026gt;', headers=headers, data=data) ```  !!! example \u0026ldquo;PHP example\u0026rdquo; php \u0026lt;?php include('vendor/rmccue/requests/library/Requests.php'); Requests::register_autoloader(); $headers = array( 'Authorization' =\u0026gt; 'Bearer \u0026lt;Token\u0026gt;' ); $data = '{ \u0026quot;data\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;\u0026lt;EntityName\u0026gt;\u0026quot;, \u0026quot;attributes\u0026quot;: { \u0026quot;confirmed\u0026quot;: false, \u0026quot;email\u0026quot;: \u0026quot;update@gmail.com\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;new name\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;\u0026quot;, \u0026quot;permission\u0026quot;: 127127127, }, \u0026quot;relationships\u0026quot;: { \u0026quot;relation_name\u0026quot;: [ ... ] }, \u0026quot;id\u0026quot;: \u0026quot;\u0026lt;ReferenceId\u0026gt;\u0026quot; } }'; $response = Requests::patch('/api/\u0026lt;EntityName\u0026gt;/\u0026lt;ReferenceId\u0026gt;', $headers, $data);\nDelete Delete a row from a table\n!!! example \u0026ldquo;Curl example\u0026rdquo; bash curl '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46' -X DELETE -H 'Authorization: Bearer \u0026lt;Token\u0026gt;'\n!!! example \u0026ldquo;Nodejs example\u0026rdquo; ```nodejs var request = require(\u0026lsquo;request\u0026rsquo;);\nvar headers = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;' }; var options = { url: '/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46', method: 'DELETE', headers: headers }; function callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { console.log(body); } } request(options, callback); ```  !!! example \u0026ldquo;Python example\u0026rdquo; ```python import requests\nheaders = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;', } response = requests.delete('/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46', headers=headers) ```  !!! example \u0026ldquo;PHP example\u0026rdquo; php \u0026lt;?php include('vendor/rmccue/requests/library/Requests.php'); Requests::register_autoloader(); $headers = array( 'Authorization' =\u0026gt; 'Bearer \u0026lt;Token\u0026gt;' ); $response = Requests::delete('/api/user_account/a5b9add2-ea56-4717-a785-7dee71a2ae46', $headers);\nExecute Execute an action on an entity type or instance\n!!! example \u0026ldquo;Curl example\u0026rdquo; curl curl '/action/\u0026lt;EntityName\u0026gt;/\u0026lt;ActionName\u0026gt;' -H 'Authorization: Bearer \u0026lt;Token\u0026gt;' --data-binary '{\u0026quot;attributes\u0026quot;:{}}'\n!!! example \u0026ldquo;PHP Example\u0026rdquo; php \u0026lt;?php include('vendor/rmccue/requests/library/Requests.php'); Requests::register_autoloader(); $headers = array( 'Authorization' =\u0026gt; 'Bearer \u0026lt;Token\u0026gt;' ); $data = '{\u0026quot;attributes\u0026quot;:{}}'; $response = Requests::post('/action/\u0026lt;EntityName\u0026gt;/\u0026lt;ActionName\u0026gt;', $headers, $data);\n!!! example \u0026ldquo;Nodejs example\u0026rdquo; ```nodejs var request = require(\u0026lsquo;request\u0026rsquo;);\nvar headers = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;' }; var dataString = '{\u0026quot;attributes\u0026quot;:{}}'; var options = { url: '/action/\u0026lt;EntityName\u0026gt;/\u0026lt;ActionName\u0026gt;', method: 'POST', headers: headers, body: dataString }; function callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { console.log(body); } } request(options, callback); ```  !!! example \u0026ldquo;Python example\u0026rdquo; ```python import requests\nheaders = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;', } data = '{\u0026quot;attributes\u0026quot;:{}}' response = requests.post('/action/\u0026lt;EntityName\u0026gt;/\u0026lt;ActionName\u0026gt;', headers=headers, data=data) ```  Relations !!! example \u0026ldquo;curl example\u0026rdquo; bash curl '/api/\u0026lt;EntityName\u0026gt;/\u0026lt;ReferenceId\u0026gt;/\u0026lt;RelationName\u0026gt;?sort=\u0026amp;page[number]=1\u0026amp;page[size]=10' -H 'Authorization: Bearer \u0026lt;Token\u0026gt;'\n!!! example \u0026ldquo;php example\u0026rdquo; php \u0026lt;?php include('vendor/rmccue/requests/library/Requests.php'); Requests::register_autoloader(); $headers = array( 'Authorization' =\u0026gt; 'Bearer \u0026lt;Token\u0026gt;' );\n!!! example \u0026ldquo;python example\u0026rdquo; ```python import requests\nheaders = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;', } params = ( ('sort', ''), ('page/[number/]', '1'), ('page/[size/]', '10'), ) response = requests.get('http://localhost:6336/api/user_account/696c98d3-3b8b-41da-a510-08e6948cf661/marketplace_id', headers=headers, params=params) #NB. Original query string below. It seems impossible to parse and #reproduce query strings 100% accurately so the one below is given #in case the reproduced version is not \u0026quot;correct\u0026quot;. # response = requests.get('http://localhost:6336/api/user_account/696c98d3-3b8b-41da-a510-08e6948cf661/marketplace_id?sort=\u0026amp;page\\[number\\]=1\u0026amp;page\\[size\\]=10', headers=headers) ```  !!! example \u0026ldquo;nodejs example\u0026rdquo; ```nodejs var request = require(\u0026lsquo;request\u0026rsquo;);\nvar headers = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;' }; var options = { url: '/api/\u0026lt;EntityName\u0026gt;/\u0026lt;ReferenceId\u0026gt;/\u0026lt;RelationName\u0026gt;?sort=\u0026amp;page[number]=1\u0026amp;page[size]=10', headers: headers }; function callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { console.log(body); } } request(options, callback); ```  !!! example \u0026ldquo;python example\u0026rdquo; ```python import requests\nheaders = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;', } params = ( ('sort', ''), ('page[number]', '1'), ('page[size]', '10'), ) response = requests.get('/api/\u0026lt;EntityName\u0026gt;/\u0026lt;ReferenceId\u0026gt;/\u0026lt;RelationName\u0026gt;', headers=headers, params=params) ``` "},{"uri":"http://localhost:1313/cloudstore/assetcolumns/","title":"Asset column","tags":[],"description":"","content":"Asset columns Column types of blob types can either be stored in the database itself (not recommended) or persist in a persistent storage.\nAfter we have created a cloud store, we can point the column to a folder on the cloud store. The column will only contain metadata and the actual file will be persisted on the cloud store.\nTo enable this, update the ForeignKeyData config of the column as follows:\nCreate a file for the schema change:\nTables: - TableName: \u0026lt;TableNameHere\u0026gt; - Columns: - ColumnName: \u0026lt;ColumnNameHere\u0026gt; ForeignKeyData: DataSource: \u0026#34;cloud\u0026#34; KeyName: \u0026lt;Cloud store name here\u0026gt; Namespace: \u0026lt;Folder name inside that clouds store\u0026gt; Upload it using the dashboard (You can alternatively just edit that from the dashboard). This will trigger a reconfiguration of the system and initiate a local sync of the cloud directory in a temporary location. The cloud directory will be synced down stream every 15 minutes while the uploads will be asynced but instantaneous.\nSuch columns like image./video./audio./markdown. will be served over HTTP in a simple GET call:\n/asset/\u0026lt;table_name\u0026gt;/\u0026lt;reference_id\u0026gt;/\u0026lt;column_name\u0026gt;.\u0026lt;extension\u0026gt;\n\u0026lt;extension\u0026gt; can be anything relevant to the mimetype of the file. The column file will be dumped as it is. Useful for using in img html tag.\n"},{"uri":"http://localhost:1313/cloudstore/","title":"Cloud store","tags":[],"description":"","content":"Cloud store Datin can work with the following storage services:\n Amazon Drive Amazon S3 Backblaze B2 Box Ceph DigitalOcean Spaces Dreamhost Dropbox FTP Google Cloud Storage Google Drive HTTP Hubic Memset Memstore Microsoft Azure Blob Storage Microsoft OneDrive Minio Nextloud OVH Openstack Swift Oracle Cloud Storage Ownloud pCloud put.io QingStor Rackspace Cloud Files SFTP Wasabi WebDAV Yandex Disk The local filesystem  Things to keep ready If the service you want to integrate with requires authentication, create the following:\n An oauth connection An oauth token generated from the above connection  "},{"uri":"http://localhost:1313/cloudstore/","title":"Cloud store","tags":[],"description":"","content":"Cloud store Cloud store is an abstraction for storage API for various features of daptin like file column storage and site hosting.\nMost cloud storage require oauth connection and token to operate.\nYou can create more stores by creating more rows in the cloud_store table, daptin will take care of syncing it.\n"},{"uri":"http://localhost:1313/state/","title":"Column as state tracker","tags":[],"description":"","content":"State tracking State of an object can help you tracing any sort of progress while making sure you maintain the consistence of the state. For eg, you might want to track the status of a \u0026ldquo;blog post\u0026rdquo; in terms of \u0026ldquo;draft\u0026rdquo;/\u0026ldquo;edited\u0026rdquo;/\u0026ldquo;published\u0026rdquo; which pre-defined endpoints defining the flow of states.\nTracking the status of things is one of the most common operation in most business flows. Daptin has a native support for state tracking and allows a lot of convienent features.\nDefining a state machine Define a state machine in YAML or JSON as follows:\n!!! example \u0026ldquo;State machine description YAML\u0026rdquo; yaml StateMachineDescriptions: - Name: task_status Label: Task Status InitialState: to_be_done Events: - Name: start Label: Start Src: - to_be_done - delayed Dst: started - Name: delayed Label: Unable to pick up Src: - to_be_done Dst: delayed - Name: ongoing Label: Record progress Src: - started - ongoing Dst: ongoing - Name: interrupted Label: Interrupted Src: - started - ongoing Dst: interrupted - Name: resume Label: Resume from interruption Src: - interrupted Dst: ongoing - Name: completed Label: Mark as completed Src: - ongoing - started Dst: completed\nUsing state machine descriptions with daptin expose couple of super useful apis to manage state based data.\nEnabling task_status state machine on todo entity will expose the following APIs\nPOST /track/start/:stateMachineId {\u0026#34;typeName\u0026#34;: \u0026#34;todo\u0026#34;, \u0026#34;referenceId\u0026#34;: \u0026#34;objectId\u0026#34;} # Start tracking a particular object by id This returns a state machine id.\nPOST /track/event/:typename/:objectStateMachineId/:eventName {} # Trigger event on current state This either moves the object state to next state, or fails on invalid event name.\nState machine A state machine is a description of \u0026ldquo;states\u0026rdquo; which the object can be in, and list of all valid transitions from one state to another. Let us begin with an example:\nThe following JSON defines a state machine which has (a hypothetical state machine for tracking todos):\n Initial state: to_be_done List of valid states: to_be_done, delayed, started, ongoing, interrupted, completed List of valid transitions, giving name to each event  { \u0026#34;Name\u0026#34;: \u0026#34;task_status\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Task Status\u0026#34;, \u0026#34;InitialState\u0026#34;: \u0026#34;to_be_done\u0026#34;, \u0026#34;Events\u0026#34;: [{ \u0026#34;Name\u0026#34;: \u0026#34;start\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Start\u0026#34;, \u0026#34;Src\u0026#34;: [ \u0026#34;to_be_done\u0026#34;, \u0026#34;delayed\u0026#34; ], \u0026#34;Dst\u0026#34;: \u0026#34;started\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;delayed\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Unable to pick up\u0026#34;, \u0026#34;Src\u0026#34;: [ \u0026#34;to_be_done\u0026#34; ], \u0026#34;Dst\u0026#34;: \u0026#34;delayed\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;ongoing\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Record progress\u0026#34;, \u0026#34;Src\u0026#34;: [ \u0026#34;started\u0026#34;, \u0026#34;ongoing\u0026#34; ], \u0026#34;Dst\u0026#34;: \u0026#34;ongoing\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;interrupted\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Interrupted\u0026#34;, \u0026#34;Src\u0026#34;: [ \u0026#34;started\u0026#34;, \u0026#34;ongoing\u0026#34; ], \u0026#34;Dst\u0026#34;: \u0026#34;interrupted\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;resume\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Resume from interruption\u0026#34;, \u0026#34;Src\u0026#34;: [ \u0026#34;interrupted\u0026#34; ], \u0026#34;Dst\u0026#34;: \u0026#34;ongoing\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;Label\u0026#34;: \u0026#34;Mark as completed\u0026#34;, \u0026#34;Src\u0026#34;: [ \u0026#34;ongoing\u0026#34;, \u0026#34;started\u0026#34; ], \u0026#34;Dst\u0026#34;: \u0026#34;completed\u0026#34; } ] } State machines can be uploaded to Daptin just like entities and actions. A JSON/YAML file with a StateMachineDescriptions top level key can contain an array of state machine descriptions.\nREST API Start tracking an object by state machine reference id Request\nPOST /track/start/:stateMachineId {\u0026#34;typeName\u0026#34;: \u0026lt;entityTypeName\u0026gt;, \u0026#34;referenceId\u0026#34;: \u0026lt;ReferenceIdOfTheObject\u0026gt; } Response\n\u0026#34;current_state\u0026#34;: \u0026lt;InitialStateOfTheStateMachine\u0026gt; \u0026#34;\u0026lt;typename\u0026gt;_smd\u0026#34;: \u0026lt;ObjectStateInstanceReferenceId\u0026gt; \u0026#34;is_state_of_\u0026lt;typename\u0026gt;\u0026#34; = \u0026lt;ObjectInstanceId\u0026gt; \u0026#34;permission\u0026#34;: \u0026lt;AuthPermission\u0026gt; Trigger an event by name in the state of an object POST /track/event/:typename/:ObjectStateInstanceReferenceId/:eventName Response\n\u0026#34;current_state\u0026#34;: \u0026lt;NewStateAfterEvent\u0026gt; \u0026#34;\u0026lt;typename\u0026gt;_smd\u0026#34;: \u0026lt;ObjectStateInstanceReferenceId\u0026gt; \u0026#34;is_state_of_\u0026lt;typename\u0026gt;\u0026#34; = \u0026lt;ObjectInstanceId\u0026gt; Enabling state tracking for entity Begin with marking an entity as trackable. To do this,\n  go to the world tables page and edit the an entity\n  Check the \u0026ldquo;Is state tracking enabled\u0026rdquo; checkbox\n  This \u0026ldquo;is_state_tracking_enabled\u0026rdquo; options tells daptin to create the associated state table for the entity. Even though we have not yet specified which state machines are available for this entity.\nTo make a state machine available for an entity, go to the \u0026ldquo;SMD\u0026rdquo; tab of this entity on the same page and add the state machine by searching it by name and adding it.\nIt would not make a lot of sense if the above state machine was allowed for all type of entities.\n"},{"uri":"http://localhost:1313/getting-started/configurations/","title":"Configuration","tags":[],"description":"","content":"_config table Global configurations are stored in _config. _config table is not exposed as CRUD API like other tables.\nOnly users who belong to administrators group cann reading/writing config entries from the config API.\nAny change in _config requires a re-init of daptin for them to take effect.\nHostname Used for identification as IMAP/SMTP server Default value from os hostname\nJWT secret Used for signing the jwt tokens issue at login\nChanging this would force all users logout\nEncryption secret Secret used to encrypt data for storing in encrypted columns\nChanging the secret would make the data stored in all encrypted column unrecoverable.\nJWT token issuer The issuer name for JWT tokens\nLanguage default The default language expected in the Accept-Language header. Different value in Accept-Language header in request will trigger a lookup in corresponding translations table if enabled.\nMax connection limit The limit for max connections from a single IP\nRate limit The limit for request rate limit per minute\nEnable Graphql Graphql endpoint /graphql is disabled by default. Set to true to use graphql endpoint\nEnable IMAP IMAP interface is disabled by default. Set to true to start listening to IMAP port\nJWT token lifetime (hours) Life time in hours of JWT tokens generated for login\nTOTP secret TOTP secret used for CSRF token generation and 2factor token generator\nEnable FTP FTP interface for sites is disabled by default (even if enabled per site). Set to true to start FTP services.\nDefault values    id name configtype configstate configenv value valuetype previousvalue created_at updated_at     1 hostname backend enabled release abbad.local   2021-01-02 15:11:56.836475    3 language.default backend enabled release en   2021-01-02 15:11:56.95177    4 limit.max_connections backend enabled release 100   2021-01-02 15:11:56.96863    5 limit.rate backend enabled release 100   2021-01-02 15:11:56.990064    6 jwt.secret backend enabled release d4f5ca52-74d3-4a50-ae6e-27b72be759b0   2021-01-02 15:11:57.026539    8 graphql.enable backend enabled release false   2021-01-02 15:11:57.100476    9 encryption.secret backend enabled release 1cdb8101fc0047e688f24c9071de76f0   2021-01-02 15:11:57.128269    10 jwt.token.issuer backend enabled release daptin-40f1e5   2021-01-02 15:11:57.148896    11 rclone.retries backend enabled release 5   2021-01-02 15:11:57.470469    12 imap.enabled backend enabled release false   2021-01-02 15:11:57.523543    13 jwt.token.life.hours backend enabled release 72   2021-01-02 15:11:57.709687    14 totp.secret backend enabled release 2DOEBQZYQBITVPTW   2021-01-02 15:11:57.752502    15 ftp.enable backend enabled release false   2021-01-02 15:11:57.999189     Get value _config table API curl \\ -H \u0026#34;Authorization: Bearer \u0026lt;ADMIN_TOKEN\u0026gt;\u0026#34; http://localhost:6336/_config/backend/\u0026lt;setting.name\u0026gt; Set new value _config table API curl \\ -H \u0026#34;Authorization: Bearer \u0026lt;ADMIN_TOKEN\u0026gt;\u0026#34; http://localhost:6336/_config/backend/\u0026lt;setting.name\u0026gt; \\ --data \u0026#34;New Value\u0026#34; "},{"uri":"http://localhost:1313/extend/data_exchange/","title":"Data Exchange","tags":[],"description":"","content":"Data Exchanges Exchanges are internal hooks to external apis, to either push data and update an external service, or pull data and update itself from some external service.\nExample, use exchange to sync data creation call to Google Sheets. So on every row created using the POST API also creates a corresponding row in your google sheet.\n!!! example \u0026ldquo;Google drive exchange YAML\u0026rdquo; yaml Exchanges: - Name: Task to excel sheet SourceAttributes: Name: todo SourceType: self TargetAttributes: sheetUrl: https://content-sheets.googleapis.com/v4/spreadsheets/1Ru-bDk3AjQotQj72k8SyxoOs84eXA1Y6sSPumBb3WSA/values/A1:append appKey: AIzaSyAC2xame4NShrzH9ZJeEpWT5GkySooa0XM TargetType: gsheet-append Attributes: - SourceColumn: \u0026quot;$self.description\u0026quot; TargetColumn: Task description - SourceColumn: self.schedule TargetColumn: Scheduled at Options: hasHeader: true\nExchanges: - Name: Blog to excel sheet sync SourceAttributes: Name: blog SourceType: self TargetAttributes: sheetUrl: https://content-sheets.googleapis.com/v4/spreadsheets/1Ru-bDk3AjQotQj72k8SyxoOs84eXA1Y6sSPumBb3WSA/values/A1:append TargetType: gsheet-append Attributes: - SourceColumn: \u0026#34;$blog.title\u0026#34; TargetColumn: Blog title - SourceColumn: \u0026#34;$blog.view_count\u0026#34; TargetColumn: View count Options: hasHeader: true Exchanges: - Name: Blog to excel sheet sync SourceAttributes: Name: blog SourceType: table TargetAttributes: sheetUrl: https://content-sheets.googleapis.com/v4/spreadsheets/1Ru-bDk3AjQotQj72k8SyxoOs84eXA1Y6sSPumBb3WSA/values/A1:append TargetType: gsheet-append Attributes: - SourceColumn: \u0026#34;$blog.title\u0026#34; TargetColumn: Blog title - SourceColumn: \u0026#34;$blog.view_count\u0026#34; TargetColumn: View count Options: hasHeader: true "},{"uri":"http://localhost:1313/getting-started/data_modeling/","title":"Data model","tags":[],"description":"","content":"Data model Tables are the basic data structure. Tables have columns. Each column has a particular data type. Tables are exposed as JSON APIs under the /api/\u0026lt;entityName\u0026gt; path.\nAutomatic creation Upload files of following types to import data in table, or create new table\n JSON !!! example \u0026quot;\u0026quot; { \u0026#34;typeName\u0026#34;: [ { dataRow } ... ] , \u0026#34;typeName2\u0026#34;: [ { dataRow } ... ] , }  CSV !!! example \u0026quot;\u0026quot; col1,col2,col3 val1,val2,val3 val4,val5,val6  XLS  Declarative creation Daptin is compatible with config files of these formats:\n JSON YAML HCL TOML  You can choose to maintain the schema in any of the above.\nname, columns and column attributes If you are looking for a more reproducible way, design your entities and create JSON or YAML files. These files can be used again to create an exact same replica.\nMultiple schema json files can be uploaded, and changes are merged accordingly.\nLets imagine we were creating a todo application and wanted to keep a track of the following for each todo item\n!!! example \u0026ldquo;Todo list example\u0026rdquo; - the todo text field - title\n!!! example \u0026ldquo;YAML example\u0026rdquo; yaml Tables: - TableName: todo Columns: - Name: title DataType: varchar(500) ColumnType: label IsIndexed: true\n!!! example \u0026ldquo;JSON example\u0026rdquo; json { \u0026quot;Tables\u0026quot;: [ { \u0026quot;TableName\u0026quot;: \u0026quot;todo\u0026quot;, \u0026quot;Columns\u0026quot;: [ { \u0026quot;Name\u0026quot;: \u0026quot;title\u0026quot;, \u0026quot;DataType\u0026quot;: \u0026quot;varchar(500)\u0026quot;, \u0026quot;ColumnType\u0026quot;: \u0026quot;label\u0026quot;, \u0026quot;IsIndexed\u0026quot;: true } ] } ] }\nColumn data validations Along with the fields mentioned above, we might want certain validations and conformations whenever we store a new todo\n!!! example \u0026ldquo;Validations\u0026rdquo; - title cannot be empty - order has to be numeric\nOnce we have come up with the above picture in mind, we can use one of the following ways define this.\nDaptin uses the excellent go-playground/validator library to provide extensive validations when creating and updating data.\nIt gives us the following unique features:\n Cross Field and Cross Struct validations by using validation tags or custom validators. Slice, Array and Map diving, which allows any or all levels of a multidimensional field to be validated.  Validation Example JSON example JSON files are the primary way to create new entities in daptin. The above two ways ultimately create a JSON file or fetch from the market.\nThe JSON for our todo entity will look as follows:\n{ \u0026#34;Tables\u0026#34;: [{ \u0026#34;TableName\u0026#34;: \u0026#34;todo\u0026#34;, \u0026#34;Columns\u0026#34;: [{ \u0026#34;Name\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;varchar(500)\u0026#34;, \u0026#34;ColumnType\u0026#34;: \u0026#34;label\u0026#34;, \u0026#34;IsIndexed\u0026#34;: true }, { \u0026#34;Name\u0026#34;: \u0026#34;completed\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;int(1)\u0026#34;, \u0026#34;ColumnType\u0026#34;: \u0026#34;truefalse\u0026#34;, \u0026#34;DefaultValue\u0026#34;: \u0026#34;false\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;deadline\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;date\u0026#34;, \u0026#34;ColumnType\u0026#34;: \u0026#34;date\u0026#34;, \u0026#34;IsNullable\u0026#34;: true }, { \u0026#34;Name\u0026#34;: \u0026#34;order\u0026#34;, \u0026#34;ColumnName\u0026#34;: \u0026#34;item_order\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;int(4)\u0026#34;, \u0026#34;ColumnType\u0026#34;: \u0026#34;measurement\u0026#34;, \u0026#34;DefaultValue\u0026#34;: \u0026#34;10\u0026#34; }, { \u0026#34;Name\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;DataType\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;ColumnType\u0026#34;: \u0026#34;content\u0026#34;, \u0026#34;IsNullable\u0026#34;: true } ], \u0026#34;Conformations\u0026#34;: [{ \u0026#34;ColumnName\u0026#34;: \u0026#34;order\u0026#34;, \u0026#34;Tags\u0026#34;: \u0026#34;numeric\u0026#34; }], \u0026#34;validations\u0026#34;: [{ \u0026#34;ColumnName\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;Tags\u0026#34;: \u0026#34;required\u0026#34; }] ]}  Name: Name is a human readable name Column Name: Name of the column in the table Column Type: The type of the column. Daptin supports a variety of types and these allow daptin to give you useful options in future (eg for viewing a timeline, a date/datetime column is required) Default value: Columns can have default values, which is used a new row is created and no value for that column is specified.  YAML example YAML example for todo entity is as follows\nTables: - TableName: todo Columns: - Name: title DataType: varchar(500) ColumnType: label IsIndexed: true - Name: url DataType: varchar(200) ColumnType: url IsNullable: true - Name: completed DataType: int(1) ColumnType: truefalse DefaultValue: \u0026#39;false\u0026#39; - Name: schedule DataType: date ColumnType: date IsNullable: true - Name: order ColumnName: item_order DataType: int(4) ColumnType: measurement DefaultValue: \u0026#39;10\u0026#39; - Name: text DataType: text ColumnType: content IsNullable: true Conformations: - ColumnName: order Tags: numeric Validations: - ColumnName: title Tags: required You can choose to work with either json or yaml. Once the schema is ready, it can be uploaded directly from daptin dashboard.\nOnline entity designer The entity designer is accessible from dashboard using the \u0026ldquo;Online designer\u0026rdquo; button. Here you can set the name, add columns and relations and create it. This is a basic designer and more advanced features to customise every aspect of the entity will be added later.\nColumn specifications Columns of the entity can be customized:\n   Property Name Property Type Description     Name string human readable name, can be skipped   ColumnName string column name in the table   ColumnDescription string human readable description   ColumnType string column type is a rich type of the column   IsIndexed boolean true to add an index on this column   IsUnique boolean true to set a unique constraint on this column   IsNullable boolean are null values allowed   Permission uint64 permission column (check authorization docs)   DataType string the column type inside the database   DefaultValue string default value if any (has to be inside single quotes for static values   Options Array[value,label] Valid values if column in enum type    Column types Daptin supports a variety of rich data types, which helps it to automatically make intelligent decisions and validations. Here is a list of all column types and what should they be used for\n   Type Name Description Example     id an identity column, mostly for internal purposes 1   alias a foreign key column uuid v4   date full date, no time 2017-12-30   time time/time interval, no date 12:34:54   day day of the month 1 to 31   month month of the year 1 to 12   year Year 2017   minute minute of the hour 0 to 59   hour hour of the dat 0 - 23   datetime date + time (not stored as timestamp, served at date time string) 2017-12-30T12:34:54   email email test@domain.com   name column to be used as name of the entity daptin   json JSON data {}   password password - are bcrypted with cost 11 $2a$11$z/VlxycDgZ\u0026hellip;   value value is enumeration type completed   truefalse boolean 1   timestamp timestamp (stored as timestamp, served as timestamp) 123123123   location.latitude only latitude 34.2938   location latitude + longitude in geoJson format [34.223,64.123]   location.longitude only longitude 64.123   location.altitude only altitude 34   color hex color string #ABCDE1   rating.10 rating on a scale of 10 8   measurement numeric column 534   label a label for the entity, similar to name but can be more than one red   content larger contents - texts/html/json/yaml very long text   file uploads, connect storage for using this    url Urls/links http://docs.dapt.in    Data relations A data oriented system with no relational knowledge of the data is next to an Excel sheet. Specifying relations in your data is the most important thing after creating your entities.\nRelations are constraints among tables and help you keep clean and consistent data. Relational data is easily accessible over APIs using a path structure like /api/\u0026lt;entityName\u0026gt;/\u0026lt;id\u0026gt;/\u0026lt;relationName\u0026gt; and the response is consistent with JSONAPI.org.\nCheckout the relation apis exposed by daptin.\n!!!example \u0026ldquo;YAML example\u0026rdquo; yaml Relations: - Subject: todo Relation: has_one Object: project\n!!!example \u0026ldquo;JSON example\u0026rdquo; json { \u0026quot;Relations\u0026quot;: [ { \u0026quot;Subject\u0026quot;: \u0026quot;todo\u0026quot;, \u0026quot;Relation\u0026quot;: \u0026quot;has_one\u0026quot;, \u0026quot;Object\u0026quot;: \u0026quot;project\u0026quot; } ] }\nRelations in JSON/YAML schema When uploading schema using a JSON / YAML file, relations can be added in the same file and daptin will create appropriate constraints and foreign keys in your underlying database.\nContinuing with our example of todos, lets say we want to group todo\u0026rsquo;s in \u0026ldquo;projects\u0026rdquo; and each todo can belong to only a single project.\nLets design a \u0026ldquo;project\u0026rdquo; entity:\n- TableName: project Columns: - Name: name DataType: varchar(200) ColumnType: name IsIndexed: true A very simple table with just a name column. Now we can define the relation between todos and projects\nRelations: - Subject: todo Relation: has_one Object: project This tells daptin that todo \u0026ldquo;has_one\u0026rdquo; project.\nRelations types Any entity can be associated to any other entity (or to itself) as one of the follows\n   Relation Name Relation Descriptio Can be empty     belongs_to a single object relation No   has_one a single object relation Yes   has_many many related objects Yes    Default relations Every entity created on daptin has at least two relations\n   Relation Type Related Entity Purpose     belongs user owner of the object   has many usergroup belongs to usergroup    These relations help you precisely control the authorization for each user.\nRead more about authorization and permissions\nMultiple relation There can be a scenario where two entities are related in more then 1 way. Consider the following example\n A blog entity A post entity Blog has many posts Each blog can have a \u0026ldquo;highlighted post\u0026rdquo; (blog has one \u0026ldquo;highlighted post\u0026rdquo;)  To achieve the above scenario, our schema would look like as follows\nTables: - TableName: blog Columns: - Name: title DataType: varchar(500) ColumnType: label - Name: view_count DataType: int(11) ColumnType: measurement - TableName: post Columns: - Name: title DataType: varchar(200) ColumnType: label - Name: body DataType: text ColumnType: content - TableName: comment Columns: - Name: body DataType: text ColumnType: content - Name: likes_count ColumnName: likes_count DataType: int(11) ColumnType: measurement Relations: - Subject: comment Relation: belongs_to Object: post - Subject: post Relation: belongs_to Object: blog // this is our post belongs to blog relation - Subject: blog Relation: has_one Object: post ObjectName: current_post SubjectName: current_post_of // this is our highlighted post relation Notice the \u0026ldquo;SubjectName\u0026rdquo; and \u0026ldquo;ObjectName\u0026rdquo; keys which helps to name our relations more intuitively.\nSQL constraints belongs to  A column is added to the subject entity, which refers to the Object entity, set to non nullable  has one  Same as above, but nullable  has many  A join table is created  Importing data Upload one of these files:\n   File Usage     Schema JSON Create schema and apis   CSV Auto create entity and upload data   XLSX Auto create entity and upload data   Data JSON Upload data from dumps    Excel file upload Excel upload provides an easy way to create entities. This takes away the complexity of writing each column type. Daptin uses a combination of rules to identify columns and their types based on the data in the excel.\nYou can upload data from XLS. Daptin will take care of going through your XLS file and identifying column types. This is one of the easiest and fastest ways to create entities and uploading data in daptin. You can specify relations among entities later from the online designer.\nCSV file upload CSV upload provides an easy way to create entities. This takes away the complexity of writing each column type. Daptin uses a combination of rules to identify columns and their types based on the data in the csv.\nYou can upload data from CSV. Daptin will take care of going through your XLS file and identifying column types. This is one of the easiest and fastest ways to create entities and uploading data in daptin. You can specify relations among entities later from the online designer.\nData conformations Daptin uses the excellent leebenson/conform library to apply conformations on data before storing them in the database\n Conform: keep user input in check (go, golang) Trim, sanitize, and modify struct string fields in place, based on tags.  Use it for names, e-mail addresses, URL slugs, or any other form field where formatting matters.\nConform doesn\u0026rsquo;t attempt any kind of validation on your fields.\nData auditing To enable recoding of all historical data for a particular entity, enable data audit for it in the worlds configuration.\nAudits are ready only and cannot be manipulated over api. You can configure the permission for your use case.\nAll changes in daptin can be recorded by enabling auditing. History is maintained in separate audit tables which maintain a copy of all columns at each change. Audit table are entities just like regular entities. All Patch/Put/Delete calls to daptin will create an entry in the audit table if the entity is changed.\nAudit tables For any entity named \u0026lt;X\u0026gt;, another tables \u0026lt;X\u0026gt;_audit is added by daptin. Eg if you enable auditing of the user_account table, then a user_account_audit table will be created.\nThe audit table will contain all the columns which are present in the original table, plus an extra column is_audit_of is added, which contains the ID of the original row. The is_audit_of is a foreign key column to the parent tables id column.\nAudit row Each row in the audit table is the copy of the original row just before it is being modified. The audit rows can be accessed just like any other relation.\nAudit table permissions By default, everyone has the access to create audit row, and no one has the access to update or delete them. These permissions can be changed, but it is not recommended at present.\n   Type Permission     Audit table permission 007007007   Audit object permission 003003003    "},{"uri":"http://localhost:1313/data-modeling/","title":"Data storage format","tags":[],"description":"","content":"Data storage Daptin relies on a relational database for all data persistence requirements. As covered in the installation currently the following relational database are supported:\n MySQL PostgreSQL SQLite  This document goes into the detail of how the database is used and what are the tables created.\nStandard columns The following 5 columns are present in every table\n   ColumnName ColumnType DataType Attributes     id id int(11) primary key Auto increment Never exposed externally   version integer int(11) get incremented every time a change is made   created_at timestamp timestamp the timestamp when the row was created   updated_at timestamp timestamp the timestamp when the row was last updated   reference_id alias varchar(40) The id exposed in APIs   permission integer int(4) Permissions - check Authorization documentation   user_id foreign key int(11) the owner of this object    Other columns are created based on the schema.\nThe id column is completely for internal purposes and is never exposed in an JSON API. Every row of data inherently belongs to one user. This is the user who created that row. The associated user can be changed later.\nWorld table The world table holds the structure for all the entities and relations (including for itself).\nEach row contains the schema for the table in a \u0026ldquo;world_schema_json\u0026rdquo; column.\n"},{"uri":"http://localhost:1313/getting-started/installation/","title":"Installation","tags":[],"description":"","content":"Installation Deploying a new instance    Deployment preference Getting started     Heroku    Docker docker run -p 8080:8080 daptin/daptin   Kubernetes Service \u0026amp; Deployment YAML   Development go get github.com/daptin/daptin   Linux (386/amd64/arm5,6,7) Download static linux builds   Windows go get github.com/daptin/daptin   OS X go get github.com/daptin/daptin   Load testing Docker compose   Raspberry Pi Linux arm 7 static build    Native binary Daptin is available as a native binary. You can download the binary for the following os from github releases\n Windows 32/64 OS X 64 Linux 32/64/arm/mips  https://github.com/daptin/daptin/releases\nExecute ./daptin to run daptin.\nIt will create a sqlite database on the disk and start listening on port 6336.\nCLI Options    Argument Definition     port set the port to listen   http_port set the https port to listen   runtime runtime test/debug/release for logs   dashboard path to default dashboard static build served at [ \u0026lt;listen_address\u0026gt;/ ]   db_type mysql/postgres/sqlite3   db_connection_string Database Connection String    Database connection string SQLite -db_connection_string test.db\nMySQL -db_connection_string \u0026quot;\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@tcp(\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;)/\u0026lt;db_name\u0026gt;\u0026quot;\nPostgreSQL: -db_connection_string \u0026quot;host=\u0026lt;hostname\u0026gt; port=\u0026lt;port\u0026gt; user=\u0026lt;username\u0026gt; password=\u0026lt;password\u0026gt; dbname=\u0026lt;db_name\u0026gt; sslmode=enable/disable\u0026quot;\nHeroku deployment Heroku is the best way to test out a live instance of daptin. Daptin has a very low memory footprint and can run smoothly even on heroku\u0026rsquo;s smallest instance.\n\nNote: Heroku puts instances to sleep after 30 minutes of idleness, which will erase all the data. It will behave like a fresh instance when it wakes up. You can subscribe to their minimum paid plan to remove this sleep due to idleness.\nDocker image Deploy the docker image\nStart daptin on your machine using docker\ndocker run -p 8080:8080 daptin/daptin\nhttps://hub.docker.com/r/daptin/daptin/\nDocker-compose Docker compose is a great tool to bring up a mysql/postgres backed daptin instance\nversion: \u0026#39;3\u0026#39; services: web: image: daptin/daptin ports: - \u0026#34;8090:8080\u0026#34; restart: always environment: DAPTIN_PORT: \u0026#39;8080\u0026#39; DAPTIN_DB_TYPE: \u0026#39;mysql\u0026#39; DAPTIN_DB_CONNECTION_STRING: \u0026#39;dev:dev@tcp(mysqldb:3306)/daptin\u0026#39; depends_on: - mysqldb mysqldb: image: mysql container_name: ${MYSQL_HOST} restart: always env_file: - \u0026#34;.env\u0026#34; environment: - MYSQL_DATABASE=${MYSQL_DATABASE} - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD} - MYSQL_USER=${MYSQL_USER} - MYSQL_PASSWORD=${MYSQL_PASSWORD} ports: - \u0026#34;8989:3306\u0026#34; volumes: - \u0026#34;./data/db/mysql:/var/lib/mysql\u0026#34; Kubernetes deployment Daptin can be infinitely scaled on kubernetes\n!!! example ```yaml apiVersion: v1 kind: Service metadata: name: daptin-instance labels: app: daptin spec: ports: - port: 8080 selector: app: daptin\n   tier: production     apiVersion: extensions/v1beta1   kind: Deployment   metadata:   name: daptin-daptin   labels:   app: daptin   spec:   strategy:   type: Recreate   template:   metadata:   labels:   app: daptin   tier: testing   spec:   containers:   - image: daptin/daptin:latest   name: daptin   args: ['-db_type', \u0026lsquo;mysql\u0026rsquo;, \u0026lsquo;-db_connection_string\u0026rsquo;, \u0026lsquo;user:password@tcp(\u0026lt;mysql_service\u0026gt;:3306)/daptin\u0026rsquo;]   ports:   - containerPort: 8080   name: daptin   \u0026mdash;   apiVersion: extensions/v1beta1   kind: Ingress   metadata:   name: daptin-test   spec:   rules:   - host: hello.website   http:   paths:   - backend:   serviceName: daptin-testing   servicePort: 8080   ```    Database configuration Daptin can use one of the following database for data persistence\n Mysql Postgres SQLite [Default]  If nothing specified, a sqlite database is created on the local file system and is used for all purposes. (uploads/blobs are not stored in database)\nYou can customise the database connection properties when starting daptin\nMySQL To use mysql, start daptin as follows\n./daptin -db_type=mysql -db_connection_string='\u0026lt;username\u0026gt;:\u0026lt;password\u0026gt;@tcp(\u0026lt;hostname\u0026gt;:\u0026lt;port\u0026gt;)/\u0026lt;db_name\u0026gt;'\nPostgreSQL ./daptin -db_type=postgres -db_connection_string='host=\u0026lt;hostname\u0026gt; port=\u0026lt;port\u0026gt; user=\u0026lt;username\u0026gt; password=\u0026lt;password\u0026gt; dbname=\u0026lt;db_name\u0026gt; sslmode=enable/disable'\nSQLite By default a \u0026ldquo;daptin.db\u0026rdquo; file is created to store data\n./daptin -db_type=sqlite -db_connection_string=db_file_name.db\nPort Daptin will use the following ports for various services (when enabled)\n-port :8080\n   Service Port To change     HTTP (JSON/GraphQL) 6336 CLI option -port :80   HTTPS 6443 CLI option -https_port :80   IMAP 6443 _config entry   SMTP 2525 /mail_server row entry    Restart Various low level configure changes requires a reset of the server to take place. Restart can be triggered using an action API and takes about 5-10 seconds.\nYou can issue a daptin restart from the dashboard. Daptin takes about 15 seconds approx to start up and configure everything.\n"},{"uri":"http://localhost:1313/user-management/new-users/","title":"New user - Sign up API","tags":[],"description":"","content":"Sign Up Action Sign up is an action on user entity. Sign up takes four inputs:\n Name Email Password PasswordConfirm  When the user initiates a Sign up action, the following things happen\n Check if guests can initiate sign in action Check if guests can create a new user (create permission) Create a new user row Check if guests can create a new usergroup (create permission) Create a new usergroup row Associate the user to the usergroup (refer permission)  This means that every user has his own dedicated user group by default.\nCurl Example curl \u0026#39;http://localhost:6336/action/user_account/signup\u0026#39; -H \u0026#39;Content-Type: application/json;charset=utf-8\u0026#39; --data-raw \u0026#39;{\u0026#34;attributes\u0026#34;:{\u0026#34;email\u0026#34;:\u0026#34;email@host.com\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;password\u0026#34;,\u0026#34;name\u0026#34;:\u0026#34;name\u0026#34;,\u0026#34;passwordConfirm\u0026#34;:\u0026#34;password\u0026#34;}}\u0026#39; Sign Up Action Permissions First you need to fetch the available actions\ncurl -H \u0026quot;Authorization: Bearer \u0026lt;token\u0026gt;\u0026quot; 'http://localhost:6336/api/action' | python -m json.tool\nMore specifically you are looking for the signup action\ncurl -H \u0026quot;Authorization: Bearer \u0026lt;token\u0026gt;\u0026quot; 'http://localhost:6336/api/action?filter=signup' | python -m json.tool\nNote the reference id of the signup action in the response, we need it to update its permission\ncurl \u0026#39;http://localhost:6336/api/action/\u0026lt;reference_id\u0026gt;\u0026#39; \\ -X PATCH \\ -H \u0026#39;Content-Type: application/vnd.api+json\u0026#39; \\ -H \u0026#39;Authorization: Bearer \u0026lt;token\u0026gt;\u0026#39; \\ --data-raw \u0026#39;{\u0026#34;data\u0026#34;:{\u0026#34;type\u0026#34;:\u0026#34;action\u0026#34;,\u0026#34;attributes\u0026#34;:{\u0026#34;permission\u0026#34;:\u0026#34;2097057\u0026#34;},\u0026#34;id\u0026#34;:\u0026#34;\u0026lt;reference_id\u0026gt;\u0026#34;},\u0026#34;meta\u0026#34;:{}}\u0026#39; Note that the `reference_id` is in two places there. #### Permission Disable for guests: 2097025 Enable for guests: 2097057 ## New user from CRUD API Users can be created by directly create an entry in the `user_account` table. Creating a user manually curl \u0026lsquo;/api/user_account\u0026rsquo;\n-H \u0026lsquo;Authorization: Bearer \u0026rsquo;\n\u0026ndash;data-binary \u0026lsquo;{ \u0026ldquo;data\u0026rdquo;: { \u0026ldquo;type\u0026rdquo;: \u0026ldquo;user_account\u0026rdquo;, \u0026ldquo;attributes\u0026rdquo;: { \u0026ldquo;email\u0026rdquo;: \u0026ldquo;test@user.com\u0026rdquo;, \u0026ldquo;name\u0026rdquo;: \u0026ldquo;test\u0026rdquo;, \u0026ldquo;password\u0026rdquo;: \u0026ldquo;password\u0026rdquo;, } } }\u0026rsquo;\n"},{"uri":"http://localhost:1313/extend/","title":"OAuth Connect","tags":[],"description":"","content":"OAuth Connections Daptin is natively aware of oauth2 flows and can seamlessly handle oauth tokens and refresh tokens (if provided).\nOauth connection are useful in consuming other parts of daptin easily, like cloud storage, sub-sites, 3rd party logins.\nTo begin using oauth involved flows (eg GoogleDrive as data storage) first daptin needs to be configured about the oauth connection parameters.\nCreating a new oauth connection  Log into the dashboard Click the tile \u0026ldquo;OAuth connections\u0026rdquo; Click the green \u0026ldquo;+\u0026rdquo; button on the top right Leave \u0026ldquo;Allow Login\u0026rdquo; unchecked. We can change this later Enter your service\u0026rsquo;s auth endpoint, eg for google its \u0026ldquo;https://accounts.google.com/o/oauth2/auth\u0026quot; Client Id: Client Id generated by the service for daptin Client Secret: Client secret, this will be stored after encryption and wont be retrievable from daptin. Name: Identify it with a name Redirect Uri: Change this to http://\u0026lt;Domain\u0026gt;/oauth/response instead of /oauth/response Response Type: code Scope: Appropriate score defined by the oauth service to access the resource  Eg:  for gdrive: https://www.googleapis.com/auth/drive for gsheet: https://www.googleapis.com/auth/spreadsheets     Token Url: The token info url of the oauth service: eg: https://accounts.google.com/o/oauth2/token  Now you can generate a token\n"},{"uri":"http://localhost:1313/extend/oauth_token/","title":"OAuth Token","tags":[],"description":"","content":"OAuth Tokens Oauth tokens can be used internally to connect to other services which require authentication.\n Tokens and Refresh token are stored with encryption in the database Refresh token is used to generate new tokens if the existing token expires  Generate a new token  Click the \u0026ldquo;expand\u0026rdquo; icon on the card to go into detailed view On the right side, under the \u0026ldquo;Actions\u0026rdquo; find \u0026ldquo;Authenticate via OAuth\u0026rdquo; Click it and click \u0026ldquo;Submit\u0026rdquo; in the next form to initiate the flow  "},{"uri":"http://localhost:1313/integrations/","title":"OpenAPI Integration","tags":[],"description":"","content":"Integrations overview You can import any OpenAPI v2/v3 spec and later use defined methods to compose actions for integration with 3rd API services.\nExample\nTodo: Add exmaple Accepting payments with Stripe Todo: Add exmaple 2fa OTP\n"},{"uri":"http://localhost:1313/user-management/signin/","title":"Sign in API","tags":[],"description":"","content":"Sign In Sign In is an action on user entity. Sign in takes two inputs:\n Email Password  When the user initiates Sign in action, the following things happen:\n Check if guests can peek users table (Peek permission) Check if guests can peek the particular user (Peek Permission) Match if the provided password bcrypted matches the stored bcrypted password If true, issue a JWT token, which is used for future calls  The main outcome of the Sign In action is the jwt token, which is to be used in the Authorization header of following calls.\nSign in CURL example !!! example \u0026ldquo;POST call for sign in\u0026rdquo;\ncurl \u0026#39;http://localhost:6336/action/user_account/signin\u0026#39; \\ -H \u0026#39;Content-Type: application/json;charset=UTF-8\u0026#39; \\ -H \u0026#39;Accept: application/json, text/plain, */*\u0026#39; \\ --data-binary \u0026#39;{\u0026#34;attributes\u0026#34;:{\u0026#34;email\u0026#34;:\u0026#34;\u0026lt;Email\u0026gt;\u0026#34;,\u0026#34;password\u0026#34;:\u0026#34;\u0026lt;Password\u0026gt;\u0026#34;}}\u0026#39; [ { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.store.set\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;key\u0026#34;: \u0026#34;token\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;\u0026lt;AccessToken\u0026gt;\u0026#34; } }, { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.notify\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;message\u0026#34;: \u0026#34;Logged in\u0026#34;, \u0026#34;title\u0026#34;: \u0026#34;Success\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;success\u0026#34; } }, { \u0026#34;ResponseType\u0026#34;: \u0026#34;client.redirect\u0026#34;, \u0026#34;Attributes\u0026#34;: { \u0026#34;delay\u0026#34;: 2000, \u0026#34;location\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;window\u0026#34;: \u0026#34;self\u0026#34; } } ] "},{"uri":"http://localhost:1313/subsite/basic_auth/","title":"Site authentication","tags":[],"description":"","content":"Protecting subsites from guests In addition to existing JWT based authentication, you can enable basic-auth over subsites since it is the quickest way to add authencation and doesn\u0026rsquo;t require any action from end-users perspective apart from knowing the username and password. Also Basic auth is understood by a wide variety of browsers natively.\n"},{"uri":"http://localhost:1313/cloudstore/sites/","title":"Static and Hugo Site","tags":[],"description":"","content":"Sites Sites are publicly accessible servers hosting static content over HTTP and HTTPS.\nFTP can also be enabled to expose any path on a cloud store as a FTP site.\n"},{"uri":"http://localhost:1313/subsite/","title":"Static/Hugo Site","tags":[],"description":"","content":"Sub site You can host multiple sites using daptin. A sub site is exposing a cloud storage folder statically under a sub-domain, domain or a path.\nExpose folders on cloud storage services as websites using your daptin instance.\n!!! example \u0026ldquo;New subsite\u0026rdquo; - Select a cloud storage - Choose a domain/sub-domain - Choose a sub-path\nRestart is required to reflect changes.\nCreating a new sub-site !!! example \u0026ldquo;Exposing a folder as a subsite\u0026rdquo; - Goto dashboard https://dashboard.domain.com/ - Click \u0026ldquo;Sub sites\u0026rdquo; - Click the green \u0026ldquo;+\u0026rdquo; icon - Type in the hostname this should be exposed to - this can be a domain or a sub-domain - the domain should be pointing to the daptin instance - Choose a name - Path: select a sub directory name to expose this sub-site. Your sub-site will be accessible at domain.com/ - Cloud store Id: choose an existing cloud store.\nRestart to enable serving the site.  Daptin will sync the cloud store locally and start serving it under the domain/path.\n"},{"uri":"http://localhost:1313/streams/","title":"Table data view API","tags":[],"description":"","content":"Streams Streams are complimentary to actions. Think of streams as views in SQL. A stream is basically one entity + set of transformations and filters on the entity. Streams are read-only and exposed with similar semantics of that of entities. Daptin will expose JSONAPI for each stream just like it does for entities.\nHere is an example of a stream which exposes list of completed todos only\n{ StreamName: \u0026#34;transformed_user\u0026#34;, RootEntityName: \u0026#34;todo\u0026#34;, Columns: []api2go.ColumnInfo{ // List of columns in this stream { Name: \u0026#34;transformed_todo_title\u0026#34;, ColumnType: \u0026#34;label\u0026#34;, }, { Name: \u0026#34;completed_on\u0026#34;, ColumnType: \u0026#34;datetime\u0026#34;, }, }, QueryParams: QueryParams{ \u0026#34;Filter\u0026#34;: \u0026#34;completed=true\u0026#34;, \u0026#34;Select\u0026#34;: \u0026#34;title,deadline\u0026#34;, }, Transformations: []Transformation{ { Operation: \u0026#34;select\u0026#34;, Attributes: map[string]interface{}{ \u0026#34;columns\u0026#34;: []string{\u0026#34;title\u0026#34;, \u0026#34;deadline\u0026#34;}, }, }, { Operation: \u0026#34;rename\u0026#34;, Attributes: map[string]interface{}{ \u0026#34;oldName\u0026#34;: \u0026#34;title\u0026#34;, \u0026#34;newName\u0026#34;: \u0026#34;transformed_todo_title\u0026#34;, }, }, { Operation: \u0026#34;rename\u0026#34;, Attributes: map[string]interface{}{ \u0026#34;oldName\u0026#34;: \u0026#34;deadline\u0026#34;, \u0026#34;newName\u0026#34;: \u0026#34;completed_on\u0026#34;, }, }, }, }\tDaptin uses the library kniren/gota to systematically specific list of transformations which are applied to the original data stream.\n"},{"uri":"http://localhost:1313/tables/","title":"Tables","tags":[],"description":"","content":"Tables !!! note Click the wrench icon to edit table definition page.\nTables are the basic building objects in Daptin. Table has a name, list of fields/columns and relations to other tables.\n!!! note Clicking on the row will take you to the data browser page.\n"},{"uri":"http://localhost:1313/groups/","title":"User group","tags":[],"description":"","content":"User groups Users and objects (rows/tables/actions) can be added to usergroups to allow restricted access to certain set of accounts.\n"},{"uri":"http://localhost:1313/user-management/","title":"User management - Permission model","tags":[],"description":"","content":"Guests Requests without a valid Authorization Bearer token will be referred to as \u0026ldquo;guests requests\u0026rdquo;. Requests with a valid token will have an identified user in the context.\nAuthorization Daptin has a built-in authorization framework based on users groups and permissions. Users are identified by their authorization token or other means of identification. Each request is identified as coming from a registered user or a guest.\nPermission model Every read/write to the system passes through two level of permission check.\n Type level: apply permission on all types of entities at the same time Data level: object level permission  The world table contains two columns:\n Permission: defines the entity level permission Default permission: defines the default permission for a new object of this entity type  The default permission for an object is picked from the default permission setting, and can be changed after the object creation (if the permission allows).\nPermission Bits None: 0, GuestPeek: 1 \u0026lt;\u0026lt; 0, GuestRead: 1 \u0026lt;\u0026lt; 1, GuestCreate: 1 \u0026lt;\u0026lt; 2, GuestUpdate: 1 \u0026lt;\u0026lt; 3, GuestDelete: 1 \u0026lt;\u0026lt; 4, GuestExecute: 1 \u0026lt;\u0026lt; 5, GuestRefer: 1 \u0026lt;\u0026lt; 6, UserPeek: 1 \u0026lt;\u0026lt; 7, UserRead: 1 \u0026lt;\u0026lt; 8, UserCreate: 1 \u0026lt;\u0026lt; 9, UserUpdate: 1 \u0026lt;\u0026lt; 10, UserDelete: 1 \u0026lt;\u0026lt; 11, UserExecute: 1 \u0026lt;\u0026lt; 12, UserRefer: 1 \u0026lt;\u0026lt; 13, GroupPeek: 1 \u0026lt;\u0026lt; 14, GroupRead: 1 \u0026lt;\u0026lt; 15, GroupCreate: 1 \u0026lt;\u0026lt; 16, GroupUpdate: 1 \u0026lt;\u0026lt; 17, GroupDelete: 1 \u0026lt;\u0026lt; 18, GroupExecute: 1 \u0026lt;\u0026lt; 19, GroupRefer: 1 \u0026lt;\u0026lt; 20, OR the desired permission bits to get the final permission column value. Example\nDEFAULT_PERMISSION = GuestPeek | GuestExecute | UserCRUD | UserExecute | GroupCRUD | GroupExecute\nAuthorization Authorization is the part where daptin decides if the caller has enough permission to execute the call. Access check happens at two levels:\n Entity level check Object level check  Both the checks have a \u0026ldquo;before\u0026rdquo; and \u0026ldquo;after\u0026rdquo; part.\nObject level permission check Once the call clears the entity level check, an object level permission check is applied. This happens in cases where the action is going to affect/read an existing row. The permission is stored in the same way. Each table has a permission column which stores the permission in OOOGGGXXX format.\nOrder of permission check The permission is checked in order of:\n Check if the user is owner, if yes, check if permission allows the current action, if yes do action Check if the user belongs to a group to which this object also belongs, if yes, check if permisison allows the current action, if yes do action User is guest, check if guest permission allows this actions, if yes do action, if no, unauthorized  Things to note here:\n There is no negative permission (this may be introduced in the future)  eg, you cannot say owner is \u0026lsquo;not allowed\u0026rsquo; to read but read by guest is allowed.   Permission check is done in a hierarchy type order  Access flow Every \u0026ldquo;interaction\u0026rdquo; in daptin goes through two levels of access. Each level has a before and after check.\n Entity level access: does the user invoking the interaction has the appropriate permission to invoke this (So for sign up, the user table need to be writable by guests, for sign in the user table needs to be peakable by guests) Instance level access: this is the second level, even if a User Account has access to \u0026ldquo;user\u0026rdquo; entity, not all \u0026ldquo;user\u0026rdquo; rows would be accessible by them  So the actual checks happen in following order:\n \u0026ldquo;Before check\u0026rdquo; for entity \u0026ldquo;Before check\u0026rdquo; for instance \u0026ldquo;After check\u0026rdquo; for instance \u0026ldquo;After check\u0026rdquo; for entity  Each of these checks can filter out objects where the user does not have enough permission.\nEntity level permission Entity level permission are set in the world table and can be updated from dashboard. This can be done by updating the \u0026ldquo;permission\u0026rdquo; column for the entity.\nFor these changes to take effect a restart is necessary.\nInstance level permission Like we saw in the entity documentation, every table has a permission column. No restart is necessary for changes in these permission.\nYou can choose to disable new user registration by changing the signup action permissions.\nUser data API Examples Users are just like any other data you maintain. User information is stored in the user_account table and exposed over /api/user_account endpoint.\nYou can choose to allow read/write permission directly to that table to allow other users/processes to use this api to read/create/update/delete users.\nUser groups User groups is a group concept that helps you manage \u0026ldquo;who\u0026rdquo; can interact with daptin, and in what ways.\nAll objects (including users and groups) belong to one or more user group.\nUsers can interact with objects which also belong to their group based on the defined group permission setting\nSocial login Oauth connection can be used to allow guests to identify themselves based on the email provided by the oauth id provider.\nSocial login Allow users to login using their existing social accounts like twitter/google/github.\nDaptin can work with any oauth flow aware identity provider to allow new users to be registered (if you have disabled normal signup).\nCreate a OAuth Connection and mark \u0026ldquo;Allow login\u0026rdquo; to enable APIs for OAuth flow.\nExamples\n!!! example \u0026ldquo;Google login configuration\u0026rdquo; !!! example \u0026ldquo;Dropbox login configuration\u0026rdquo; !!! example \u0026ldquo;Github login configuration\u0026rdquo; !!! example \u0026ldquo;Linkedin login configuration\u0026rdquo; !!! example \u0026ldquo;Encrypted values\u0026rdquo; The secrets are stored after encryption so the value you see in above screenshots are encrypted values.\nConfiguring default user group You can configure which User groups should newly registered users be added to after their signup.\nThis can be configured in the table properties from the dashboard or by updating the entity configuration from the API\n!!!note \u0026ldquo;Resync required\u0026rdquo; Resync action is required to be called for default group settings to take effect\nAuthentication token The authentication token is a JWT token issued by daptin on sign in action. Users can create new actions to allow other means of generating JWT token. It is as simple as adding another outcome to an action.\nServer side Daptin uses OAuth 2 based authentication strategy. HTTP calls are checked for Authorization header, and if present, validated as a JWT token. The JWT token should have been issued by daptin earlier and should not have expired. To see how to generate JWT token, checkout the sing-in action.\nThe JWT token contains the issuer information (daptin) plus basic user profile (email). The JWT token has a one hour (configurable) expiry from the time of issue.\nIf the token is absent or invalid, the user is considered as a guest. Guests also have certain permissions. Checkout the Authorization docs for details.\nClient side On the client side, for dashboard, the token is stored in local storage. The local storage is cleared on logout or if the server responds with a 401 Unauthorized status.\n"},{"uri":"http://localhost:1313/users/","title":"Users","tags":[],"description":"","content":"Users List of user accounts. Create more account, edit account details or delete accounts here.\n"},{"uri":"http://localhost:1313/websockets/","title":"Websocket endpoint","tags":[],"description":"","content":"Websockets Clients can connect to a websocket endpoint\nEndpoint\nws://localhost:6336/live?token=\u0026lt;auth_token\u0026gt;\n!note WSS Use wss:// if you have enabled SSL\nClient request payload structure\n{ \u0026#34;method\u0026#34;: \u0026#34;\u0026#34;, // one of list-topic, create-topic, destroy-topic, subscribe, unsubscribe, new-message \u0026#34;type\u0026#34;: \u0026#34;\u0026#34;, // required when method is subscribe \u0026#34;payload\u0026#34;: {} // attributes depending on the method } Websocket requests List topics List all the available topics - System topics - User created topics\n{ \u0026#34;method\u0026#34;: \u0026#34;list-topic\u0026#34; } Sample Response\n{ \u0026#34;MessageSource\u0026#34;: \u0026#34;system\u0026#34;, \u0026#34;EventType\u0026#34;: \u0026#34;response\u0026#34;, \u0026#34;ObjectType\u0026#34;: \u0026#34;topic-list\u0026#34;, \u0026#34;EventData\u0026#34;: { \u0026#34;topics\u0026#34;: [ \u0026#34;task_task_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;timeline\u0026#34;, \u0026#34;application\u0026#34;, \u0026#34;json_schema_json_schema_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;plan_plan_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;mail_account\u0026#34;, \u0026#34;stream\u0026#34;, \u0026#34;user_otp_account\u0026#34;, \u0026#34;outbox_outbox_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;oauth_token_oauth_token_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;stream_stream_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;deployment_deployment_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;feed_feed_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;smd_smd_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;site_site_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;timeline_timeline_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;tab_eygurbe\u0026#34;, \u0026#34;screen_screen_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;mail_server\u0026#34;, \u0026#34;certificate\u0026#34;, \u0026#34;data_exchange\u0026#34;, \u0026#34;document_document_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;oauth_token\u0026#34;, \u0026#34;calendar_calendar_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;tab_nuqymzy\u0026#34;, \u0026#34;outbox\u0026#34;, \u0026#34;screen\u0026#34;, \u0026#34;integration_integration_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;oauth_connect\u0026#34;, \u0026#34;user_payment_user_payment_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;mail\u0026#34;, \u0026#34;world\u0026#34;, \u0026#34;mail_account_mail_account_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;mail_box\u0026#34;, \u0026#34;world_world_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;user_account_user_account_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;tab_nuqymzy_tab_nuqymzy_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;calendar\u0026#34;, \u0026#34;smd\u0026#34;, \u0026#34;user_payment\u0026#34;, \u0026#34;action\u0026#34;, \u0026#34;task\u0026#34;, \u0026#34;site\u0026#34;, \u0026#34;integration\u0026#34;, \u0026#34;starter_app_starter_app_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;plan\u0026#34;, \u0026#34;usergroup\u0026#34;, \u0026#34;tab_eygurbe_tab_eygurbe_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;deployment\u0026#34;, \u0026#34;starter_app\u0026#34;, \u0026#34;json_schema\u0026#34;, \u0026#34;user_otp_account_user_otp_account_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;feed\u0026#34;, \u0026#34;cloud_store_cloud_store_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;world_world_id_has_smd_smd_id\u0026#34;, \u0026#34;certificate_certificate_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;mail_mail_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;action_action_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;data_exchange_data_exchange_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;user_account\u0026#34;, \u0026#34;application_application_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;document\u0026#34;, \u0026#34;oauth_connect_oauth_connect_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;cloud_store\u0026#34;, \u0026#34;mail_server_mail_server_id_has_usergroup_usergroup_id\u0026#34;, \u0026#34;mail_box_mail_box_id_has_usergroup_usergroup_id\u0026#34; ] } } Create topic Create a new topic\n{ \u0026#34;method\u0026#34;: \u0026#34;create-topic\u0026#34;, \u0026#34;attributes\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;new_topic_name\u0026gt;\u0026#34; } } Destroy topic Delete a user created topic\n{ \u0026#34;method\u0026#34;: \u0026#34;destroy-topic\u0026#34;, \u0026#34;attributes\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;topic_name\u0026gt;\u0026#34; } } Subscribe topic Listen to create/update/delete events in any table\n{ \u0026#34;method\u0026#34;: \u0026#34;subscribe\u0026#34;, \u0026#34;attributes\u0026#34;: { \u0026#34;topic\u0026#34;: \u0026#34;user_account\u0026#34; } } Create event sample payload\n{ \u0026#34;MessageSource\u0026#34;: \u0026#34;database\u0026#34;, \u0026#34;EventType\u0026#34;: \u0026#34;create\u0026#34;, \u0026#34;ObjectType\u0026#34;: \u0026#34;user_account\u0026#34;, \u0026#34;EventData\u0026#34;: { \u0026#34;__type\u0026#34;: \u0026#34;user_account\u0026#34;, \u0026#34;confirmed\u0026#34;: false, \u0026#34;created_at\u0026#34;: \u0026#34;2021-03-13T13:47:07.954634Z\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;asdf@asfd.cm\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;asdf\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;$2a$11$HbH5o1s6ThsMJ9ft/.uljO9.T.od/tR0RFtep50Ef5mzymI6kNlW.\u0026#34;, \u0026#34;permission\u0026#34;: 2097057, \u0026#34;reference_id\u0026#34;: \u0026#34;004cc6b6-8b9b-4d51-936a-128133b21d04\u0026#34;, \u0026#34;updated_at\u0026#34;: null, \u0026#34;user_account_id\u0026#34;: \u0026#34;ee655e01-98a5-4761-bc93-b7a15e2b5847\u0026#34;, \u0026#34;version\u0026#34;: 1 } } Update event sample payload\n{ \u0026#34;MessageSource\u0026#34;: \u0026#34;database\u0026#34;, \u0026#34;EventType\u0026#34;: \u0026#34;update\u0026#34;, \u0026#34;ObjectType\u0026#34;: \u0026#34;user_account\u0026#34;, \u0026#34;EventData\u0026#34;: { \u0026#34;__type\u0026#34;: \u0026#34;user_account\u0026#34;, \u0026#34;confirmed\u0026#34;: false, \u0026#34;created_at\u0026#34;: \u0026#34;2021-03-13T13:47:07.954634Z\u0026#34;, \u0026#34;email\u0026#34;: \u0026#34;asdf@asfd.cm\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;asdf\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;$2a$11$U83vQU5A3Xq2Gcphb52XOej8H9p1GbFKerpkoSesbx674qZfBjJdu\u0026#34;, \u0026#34;permission\u0026#34;: 2097057, \u0026#34;reference_id\u0026#34;: \u0026#34;004cc6b6-8b9b-4d51-936a-128133b21d04\u0026#34;, \u0026#34;updated_at\u0026#34;: \u0026#34;2021-03-13T13:48:21.258962Z\u0026#34;, \u0026#34;user_account_id\u0026#34;: \u0026#34;ee655e01-98a5-4761-bc93-b7a15e2b5847\u0026#34;, \u0026#34;version\u0026#34;: 2 } } Subscribe with filters { \u0026#34;method\u0026#34;: \u0026#34;subscribe\u0026#34;, \u0026#34;attributes\u0026#34;: { \u0026#34;topic\u0026#34;: \u0026#34;user_account\u0026#34;, \u0026#34;filters\u0026#34;: { // filter on type of event: create/update/delete \u0026#34;EventType\u0026#34;: \u0026#34;update\u0026#34;, // filter on column data, rows with unmatched column value will not be sent \u0026#34;\u0026lt;column_name\u0026gt;\u0026#34;: \u0026#34;\u0026lt;filter_value\u0026gt;\u0026#34; } } } Unsubscribe topic Unsubscribe to an subscribed topic (this is required if you want to subscribe with new filters)\n{ \u0026#34;method\u0026#34;: \u0026#34;unsubscribe\u0026#34;, \u0026#34;attributes\u0026#34;: { \u0026#34;topic\u0026#34;: \u0026#34;\u0026lt;topic_name\u0026gt;\u0026#34; } } New message for a user-created topic Send a message on a user created topic, broad-casted to all subscribers of this topic\n{ \u0026#34;method\u0026#34;: \u0026#34;new-message\u0026#34;, \u0026#34;attributes\u0026#34;: { \u0026#34;topic\u0026#34;: \u0026#34;test\u0026#34;, \u0026#34;message\u0026#34;: { \u0026#34;hello\u0026#34;: \u0026#34;world\u0026#34; } } }\t"},{"uri":"http://localhost:1313/actions/","title":"Actions","tags":[],"description":"","content":"What are actions An action is a set of outcomes (as defined in the action schema) which is executed when action endpoint is invoked.\nAn action can have a set of required input fields or none at all. Actions can also be built to handle callbacks/webhooks from other services (like payment gateway server to server notification).\nActions can be thought of as follows:\n A set of inputs (key value pair, extracted from query params and request body) A set of outcomes based on the inputs  What are actions and why do I need this Create/Read/Update/Delete (CRUD) APIs are only basic APIs exposed on the database, and you would rarely want to make those API available to your end user. Reasons could be multiple\n The end user doesn\u0026rsquo;t (immediately) owe the data they create Creating a \u0026ldquo;row\u0026rdquo;/\u0026ldquo;data entry\u0026rdquo; entry doesn\u0026rsquo;t signify completion of a process or a flow Usually a \u0026ldquo;set of entities\u0026rdquo; is to be created and not just a single entity (when you create a user, you also want to create a usergroup also and associate the user to usergroup) You could allow user to update only some fields of an entity and not all fields (eg user can change their name, but not email) Changes based on some entity (when you are going through a project, a new item should automatically belong to that project)  Actions provide a powerful abstraction over the CRUD and to handle a variety of use cases. Actions can also make use of operations imported from OpenAPI Specs of other services.\nTo quickly understand what actions are, lets see what happened when you \u0026ldquo;signed up\u0026rdquo; on Daptin.\nTake a look at how \u0026ldquo;Sign up\u0026rdquo; action is defined. We will go through each part of this definition An action is performed on an entity. Let\u0026rsquo;s also remember that world is an entity itself.\nAction schema Name: signup Label: Sign up InstanceOptional: true OnType: user_account InFields: - Name: name ColumnType: label IsNullable: false - Name: email ColumnType: email IsNullable: false - Name: password ColumnType: password IsNullable: false - Name: Password Confirm ColumnName: passwordConfirm ColumnType: password IsNullable: false Validations: - ColumnName: email Tags: email - ColumnName: name Tags: required - ColumnName: password Tags: eqfield=InnerStructField[passwordConfirm],min=8 Conformations: - ColumnName: email Tags: email - ColumnName: name Tags: trim OutFields: - Type: user_account Method: POST Reference: user Attributes: name: \u0026#34;~name\u0026#34; email: \u0026#34;~email\u0026#34; password: \u0026#34;~password\u0026#34; confirmed: \u0026#39;0\u0026#39; - Type: usergroup Method: POST Reference: usergroup Attributes: name: \u0026#34;!\u0026#39;Home group for \u0026#39; + user.name\u0026#34; - Type: user_user_id_has_usergroup_usergroup_id Method: POST Reference: user_usergroup Attributes: user_id: \u0026#34;$user.reference_id\u0026#34; usergroup_id: \u0026#34;$usergroup.reference_id\u0026#34; - Type: client.notify Method: ACTIONRESPONSE Attributes: type: success title: Success message: Signup Successful - Type: client.redirect Method: ACTIONRESPONSE Attributes: location: \u0026#34;/auth/signin\u0026#34; window: self Action Name  Name: \u0026quot;signup\u0026quot;,  Name of the action, this should be unique for each actions. Actions are identified by this name\nAction Label  Label: \u0026quot;Sign up\u0026quot;,  Label is for humans\nOnType  OnType: \u0026quot;user_account\u0026quot;,  The primary type of entity on which the action happens. This is used to know where the actions should come up on the UI\nAction instance  InstanceOptional: true,  If the action requires an \u0026ldquo;instance\u0026rdquo; of that type on which the action is defined (more about this below). So \u0026ldquo;Sign up\u0026rdquo; is defined on \u0026ldquo;user\u0026rdquo; table, but an instance of \u0026ldquo;user\u0026rdquo; is not required to initiate the action. This is why the \u0026ldquo;Sign up\u0026rdquo; doesnt ask you to select a user (which wouldn\u0026rsquo;t make sense either)\nInput fields  InFields: []api2go.ColumnInfo  This is a set of inputs which the user need to fill in to initiate that action. As we see here in case of \u0026ldquo;Sign up\u0026rdquo;, we ask for four inputs\n Name Email Password Confirm password  Note that the ColumnInfo structure is the same one we used to define tables.\nValidations Validations: []ColumnTag Validations validate the user input and rejects if some validation fails\n{ \u0026#34;ColumnName\u0026#34;: \u0026#34;email\u0026#34;, \u0026#34;Tags\u0026#34;: \u0026#34;email\u0026#34; } This tells that the \u0026ldquo;email\u0026rdquo; input should actually be an email.\nOne of the more interesting validations is cross field check\n { ColumnName: \u0026quot;password\u0026quot;, Tags: \u0026quot;eqfield=InnerStructField[passwordConfirm],min=8\u0026quot;, },  This tells that the value entered by user in the password field should be equal to the value in passwordConfirm field. And the minimum length should be 8 characters.\nConformations  Conformations: []ColumnTag  Conformations help to clean the data before the action is carried out. The frequently one used are trim and email.\n Trim: trim removes white spaces, which are sometimes accidently introduced when entering data Email: email conformation will normalize the email. Things like lowercase + trim  OutFields  OutFields: []Outcome  OutFields are the list of outcomes which the action will result in. The outcomes are evaluated in a top to bottom manner, and the result of one outcome is accessible when evaluating the next outcome.\nWe have defined three outcomes in our \u0026ldquo;Sign Up\u0026rdquo; action.\n  Create a user\n { Type: \u0026quot;user_account\u0026quot;, Method: \u0026quot;POST\u0026quot;, Reference: \u0026quot;user\u0026quot;, Attributes: map[string]interface{}{ \u0026quot;name\u0026quot;: \u0026quot;~name\u0026quot;, \u0026quot;email\u0026quot;: \u0026quot;~email\u0026quot;, \u0026quot;password\u0026quot;: \u0026quot;~password\u0026quot;, \u0026quot;confirmed\u0026quot;: \u0026quot;0\u0026quot;, }, },    This tells us that, the first outcome is of type \u0026ldquo;user\u0026rdquo;. The outcome is a \u0026ldquo;New User\u0026rdquo; (POST). It could alternatively have been a Update/Find/Delete operation.\nThe attributes maps the input fields to the fields of our new user.\n ~name will be the value entered by user in the name field ~email will be the entered in the email field, and so on  If we skip the ~, like \u0026quot;confirmed\u0026quot;: \u0026quot;0\u0026quot; Then the literal value is used.\nReference: \u0026quot;user\u0026quot;, We have this to allow the \u0026ldquo;outcome\u0026rdquo; to be referenced when evaluating the next outcome. Let us see the other outcomes\nJavaScript in fields - \u0026ldquo;!\u0026hellip;\u0026rdquo;  { Type: \u0026quot;usergroup\u0026quot;, Method: \u0026quot;POST\u0026quot;, Reference: \u0026quot;usergroup\u0026quot;, Attributes: map[string]interface{}{ \u0026quot;name\u0026quot;: \u0026quot;!'Home group for ' + user.name\u0026quot;, }, },  Daptin embeds the otto js engine. An exclamation mark sets to evaluate the rest of the string as Javascript.\n'Home group for ' + user.name becomes \u0026ldquo;Home group for parth\u0026rdquo;\nReferencing previous outcomes  { Type: \u0026quot;user_user_id_has_usergroup_usergroup_id\u0026quot;, Method: \u0026quot;POST\u0026quot;, Reference: \u0026quot;user_usergroup\u0026quot;, Attributes: map[string]interface{}{ \u0026quot;user_id\u0026quot;: \u0026quot;$user.reference_id\u0026quot;, \u0026quot;usergroup_id\u0026quot;: \u0026quot;$usergroup.reference_id\u0026quot;, }, },  the $ sign is to refer the reference variables. Here this outcome adds the newly created user to the newly created usergroup.\n"},{"uri":"http://localhost:1313/","title":"Daptin","tags":[],"description":"","content":"Daptin provides API to programmatically create, edit, access and delete\n  data\n table metadata data in tables, get by id, query on indexed columns relations in data and table columns    user\n users and usergroups administrators data ownership to a user and can be added to many usergroups    assets\n store and fetch files from local and cloud storage provider    workflows/cron schedules\n  webhook/callback endpoints\n  subsites (https/ftp/imap/smtp)\n create email hosts and accounts using apis fetch mails on apis send mail using apis spf/dkim supported letsencrypt autotls    Yjs compatible websocket endpoint\n  openapi specs\n invoke 3rd parth apis using their openapi spec    set access level for apis\n  - User management - Sign up and sign in (1fa/2fa with password/TOTP) - Extensive authorization control table level/action level and row level - Rate limiting/connection throttling at IP/API level - Data management - Declarative schema definition, relations and column properties - CRUD APIs with Authorization/Pagination/Search/Relations - File asset columns to store images/video/audio/blobs - Storage management - localhost/gDrive/S3/B2/DropBox/FTP and many more supported - Site management - Create HTTP sites based by storage anywhere - Enable HTTPS using LetsEncrypt - Create and Build HUGO static sites - Expose directories as FTP sites - Integration and action management - Create workflows and expose as APIs - Call any 3rd party API by importing OpenAPI Spec - Mail management - Enable SMTPS and IMAPS services and use daptin as your regular email provider - Multi hostname mail server - Multiple email accounts - With a clean white-branded dashboard \nFeatures Consume the following features easily on any device\n  Database backed persistence, 3NF normalized tables\n  JSON API/GraphQL for CRUD apis\n  User and group management and access control\n  Social login with OAuth: tested with google, github, linkedin\n  Actions for abstracting out business flows\n  Extensive state tracking APIs\n  Enable Data Auditing from a single toggle\n  Synchronous Data Exchange with 3rd party APIs\n  Multilingual tables support, supports Accept-Language header\n  Cloud storage sync like gdrive, dropbox, b2, s3 and more\n  Asset column to hold file and blob data, backed by storage\n  Multiple websites under separate sub-domain/sub-paths\n  Connect with external APIs by using extension points\n  Data View Streams\n  Flexible data import (auto create new tables and automated schema generation)\n XLSX JSON CSV    Database to have consistent single source of truth [Postgres/MySQL/SQLite]\n  Flexible auth using the JWT-based authentication \u0026amp; permission system\n  Works with all frontend frameworks like React, Vue.js, Angular, Android, iOS\n  Very low memory requirement and horizontally scalable\n  Can be deployed on a wide range of hardware arm5,arm6,arm7,arm64,mips,mips64,mips64le,mipsle (or build for your target using go)\n  Guides  Create a site using a google drive folder Creating a todo list backend  "},{"uri":"http://localhost:1313/404.html","title":"Whoops! Page not found","tags":[],"description":"This is a 404 page","content":"That page can\u0026rsquo;t be found.\nOur latest content is on the homepage.\nPhoto by Aron Visuals on Unsplash"},{"uri":"http://localhost:1313/actions/default_actions/","title":"","tags":[],"description":"","content":"Actions list Use actions to build work flows to carry out tasks like syncing data or emailing your users. You can also give access to these workflows to your users and restrict their access by altering their permission.\nThe following actions are available by default on a fresh instance. These actions cannot be deleted and will be recreated if deleted directly from the database.\nActions can use certain inbuilt methods to perform wide variety of operations.\nDefault actions Restart daptin Restarts daptin immediately and reads file system for new config and data files and apply updates to the APIs as necessary.\nTakes about 15 seconds (async) to reconfigure everything.\nvar request = require(\u0026#39;request\u0026#39;); var headers = { \u0026#39;Authorization\u0026#39;: \u0026#39;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhcjFAZ21haWwuY29tIiwiZXhwIjoxNTIzMTgzMTA0LCJpYXQiOiIyMDE4LTA0LTA1VDE1OjU1OjA0LjYyMzU4NTYxKzA1OjMwIiwiaXNzIjoiZGFwdGluIiwianRpIjoiNmJhMmFhZjgtODBlNS00OGIwLTgwZmItMzEzYzk3Nzg0Y2E4IiwibmFtZSI6InBhcnRoIiwibmJmIjoxNTIyOTIzOTA0LCJwaWN0dXJlIjoiaHR0cHM6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci9mNGJmNmI2Nzg5NGU5MzAzYjZlMTczMTMyZWE0ZTkwYVx1MDAyNmQ9bW9uc3RlcmlkIn0.eb5Vp00cHLeshZBtwJIyarJ6RQOLeVPj15n8ubVnGYo\u0026#39; }; var dataString = \u0026#39;{\u0026#34;attributes\u0026#34;:{}}\u0026#39;; var options = { url: \u0026#39;http://localhost:6336/action/world/restart_daptin\u0026#39;, method: \u0026#39;POST\u0026#39;, headers: headers, body: dataString }; function callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { console.log(body); } } request(options, callback); Generate random data Generate random data of any entity type to play around. Takes in a count parameter and generates that many rows. Daptin uses a fake data generator to generate quality random data for a wide variety of fields.\nvar request = require(\u0026#39;request\u0026#39;); var headers = { \u0026#39;Authorization\u0026#39;: \u0026#39;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFydHBhcjFAZ21haWwuY29tIiwiZXhwIjoxNTIzMTgzMTA0LCJpYXQiOiIyMDE4LTA0LTA1VDE1OjU1OjA0LjYyMzU4NTYxKzA1OjMwIiwiaXNzIjoiZGFwdGluIiwianRpIjoiNmJhMmFhZjgtODBlNS00OGIwLTgwZmItMzEzYzk3Nzg0Y2E4IiwibmFtZSI6InBhcnRoIiwibmJmIjoxNTIyOTIzOTA0LCJwaWN0dXJlIjoiaHR0cHM6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci9mNGJmNmI2Nzg5NGU5MzAzYjZlMTczMTMyZWE0ZTkwYVx1MDAyNmQ9bW9uc3RlcmlkIn0.eb5Vp00cHLeshZBtwJIyarJ6RQOLeVPj15n8ubVnGYo\u0026#39;, }; var dataString = \u0026#39;{\u0026#34;attributes\u0026#34;:{\u0026#34;count\u0026#34;:100,\u0026#34;world_id\u0026#34;:\u0026#34;a82bcd84-db3a-4542-b0ef-80e81fc62f8e\u0026#34;}}\u0026#39;; var options = { url: \u0026#39;http://localhost:6336/action/world/generate_random_data\u0026#39;, method: \u0026#39;POST\u0026#39;, headers: headers, body: dataString }; function callback(error, response, body) { if (!error \u0026amp;\u0026amp; response.statusCode == 200) { console.log(body); } } request(options, callback); Export data !!! example \u0026quot;\u0026quot; Export data as JSON dump. This will export for a single table if table_name param is specific, else it will export all data.\nImport data !!! example \u0026quot;\u0026quot; Import data from dump exported by Daptin. Takes in the following parameters:\n- dump_file - json|yaml|toml|hcl - truncate_before_insert: default ```false```, specify ```true``` to tuncate tables before importing  Upload file to a cloud store !!! example \u0026quot;\u0026quot; Upload file to external store cloud_store, may require oauth token and connection.\n- file: any  Upload XLS !!! example \u0026quot;\u0026quot; Upload xls to entity, takes in the following parameters:\n- data_xls_file: xls, xlsx - entity_name: existing table name or new to create a new entity - create_if_not_exists: set ```true``` if creating a new entity (to avoid typo errors in above) - add_missing_columns: set ```true``` if the file has extra columns which you want to be created  Upload CSV !!! example \u0026quot;\u0026quot; Upload CSV to entity\n- data_xls_file: xls, xlsx - entity_name: existing table name or new to create a new entity - create_if_not_exists: set ```true``` if creating a new entity (to avoid typo errors in above) - add_missing_columns: set ```true``` if the file has extra columns which you want to be created  !!! example \u0026ldquo;Curl\u0026rdquo;\ncurl \u0026#39;http://localhost:6336/action/world/upload_csv_to_system_schema\u0026#39; \\ -H \u0026#39;Authorization: Bearer \u0026lt;Token\u0026gt;\u0026#39; \\ --data-binary \u0026#39;{ \u0026#34;attributes\u0026#34;: { \u0026#34;create_if_not_exists\u0026#34;: true, \u0026#34;add_missing_columns\u0026#34;: true, \u0026#34;data_csv_file\u0026#34;: [{ \u0026#34;name\u0026#34;: \u0026#34;\u0026lt;file name\u0026gt;.csv\u0026#34;, \u0026#34;file\u0026#34;: \u0026#34;data:text/csv;base64,\u0026lt;File contents base64 here\u0026gt;\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;text/csv\u0026#34; }], \u0026#34;entity_name\u0026#34;: \u0026#34;\u0026lt;entity name\u0026gt;\u0026#34; } }\u0026#39; !!! example \u0026ldquo;NodeJS Example\u0026rdquo; ``` import requests\nheaders = { 'Authorization': 'Bearer \u0026lt;Token\u0026gt;', } data = '{ \u0026quot;attributes\u0026quot;: { \u0026quot;create_if_not_exists\u0026quot;: true, \u0026quot;add_missing_columns\u0026quot;: true, \u0026quot;data_csv_file\u0026quot;: [{ \u0026quot;name\u0026quot;: \u0026quot;\u0026lt;file name\u0026gt;.csv\u0026quot;, \u0026quot;file\u0026quot;: \u0026quot;data:text/csv;base64,\u0026lt;File contents base64 here\u0026gt;\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;text/csv\u0026quot; }], \u0026quot;entity_name\u0026quot;: \u0026quot;\u0026lt;entity name\u0026gt;\u0026quot; } }' response = requests.post('http://localhost:6336/action/world/upload_csv_to_system_schema', headers=headers, data=data) ```  Upload schema !!! example \u0026quot;\u0026quot; Upload entity types or actions or any other config to daptin\n- schema_file: json|yaml|toml|hcl restart, system_json_schema_update  Download Schema !!! example \u0026quot;\u0026quot; Download a JSON config of the current daptin instance. This can be imported at a later stage to recreate a similar instance. Note, this contains only the structure and not the actual data. You can take a data dump separately. Or of a particular entity type\nBecome administrator !!! example \u0026quot;\u0026quot; Become an admin user of the instance. Only the first user can do this, as long as there is no second user.\nSign up !!! example \u0026quot;\u0026quot; Sign up a new user, takes in the following parameters\n- name - email - password - passwordConfirm Creates these rows : - a new user - a new usergroup for the user - user belongs to the usergroup  Sign in !!! example \u0026quot;\u0026quot; Sign in essentially generates a [JWT token] issued by Daptin which can be used in requests to authenticate as a user.\n- email - password  Oauth login !!! example \u0026quot;\u0026quot; Authenticate via OAuth, this will redirect you to the oauth sign in page of the oauth connection. The response will be handeled by oauth login response\nOauth login response !!! example \u0026quot;\u0026quot; This action is supposed to handle the oauth login response flow and not supposed to be invoked manually.\nTakes in the following parameters (standard oauth2 params) - code - state - authenticator Creates : - oauth profile exchange: generate a token from oauth provider - stores the oauth token + refresh token for later user  Add data exchange !!! example \u0026quot;\u0026quot; Add new data sync with google-sheets\n- name - sheet_id - app_key Creates a data exchange  List of inbuilt methods These methods can be used in actions\n   Method Identifier Method Inputs Description       __become_admin User auth token is required tries to make the caller the administrator of the instance     cloudstore.file.delete cloudstore id and path delete a file at a path in cloud store     cloudstore.file.upload cloudstore id, path and file blob upload a file at a path in cloud store     cloudstore.folder.create cloudstore id and path create a folder at a path in cloud store     cloudstore.path.move cloudstore id, old path and new path move a file/folder or rename path in a cloud store     cloudstore.site.create cloudstore id, site hostname and path on cloudstoure to host create a new hugo/static site at a path in a cloud store     column.storage.sync table id and column name sync all changes to the asset column store with cloud store provider     __upload_csv_file_to_entity csv file and target entity name upload data from CSV file to a table     world.column.delete table id and column name delete a column in a table     world.delete table id delete a table     __download_cms_config no inputs exports the internal config as JSON, should never be accessible to public     __enable_graphql no inputs enable the graphql endpoint by setting config to true , should never be accessible to public     __csv_data_export table id export data from a table as csv, should never be accessible to public     __data_export table id export data from a table as json, should never be accessible to public     acme.tls.generate site id generate a certificate for a site from LetsEncrypt     jwt.token email and password of the user account generates a JWT token valid for 4 days (configurable)     oauth.token oauth token id returns the access token for the stored oauth token     password.reset.begin email id start password reset process by sending a password reset email to user from the configured mail server     password.reset.verify email id, token, new password verify password reset and let the user set a new password if token is valid     generate.random.data table id generate N rows fit for table, random data generated for each field     self.tls.generate site id create a self-generated SSL certificate for HTTPS enabled sites     cloud_store.files.import table id, cloudstore id, path import files from a cloud store to a table     __data_import file dump import data from JSON/YAML dump direct to database     integration.install integration id Import all operations defined in the integration spec as actions     mail.servers.sync no input synchronise mail server interface     response.create response_type create a custom response to be returned     $network.request Headers,Query,Body call an external API     oauth.client.redirect authenticator send the user to the 3rd party oauth login page     oauth.login.response authenticator, state, user id handle the response code from 3rd party login     oauth.profile.exchange authenticator, profileUrl, token exchange the token from 3rd party oauth service for the user profile     otp.generate email/mobile generate a TOTP for the account (can be sent via SMS/EMAIL)     otp.login.verify email/mobile and otp code verify a TOTP code presented by the user, generate a JWT token if valid     world.column.rename table id, column name, new column name try to rename a table column     __restart no input reload all configurations and settings (after changes in config/site/cloudstore etc)     site.file.get site id, file path get file contents at the certain path     site.file.list site id, path get list of contents of a folder     site.storage.sync site id sync down all changes from the storage provider     __upload_xlsx_file_to_entity xlsx file, table id import XLS and insert rows into a table      "},{"uri":"http://localhost:1313/actions/examples/","title":"","tags":[],"description":"","content":"Examples Actions are entity dependent APIs which you want to expose which may have an outcome of events. Most basic example is the login action which generates an oauth2 token as an outcome.\nUse action to expose endpoints for your forms and processes. Here is an example of creating a \u0026ldquo;/action/project/new_task\u0026rdquo; API:\n!!! example \u0026ldquo;New task action YAML\u0026rdquo; yaml Actions: - Name: new_task Label: New to do OnType: project InstanceOptional: true InFields: - ColumnName: description Name: Description ColumnType: label - ColumnName: schedule Name: Scheduled at ColumnType: date OutFields: - Type: todo Method: POST Attributes: schedule: \u0026quot;~schedule\u0026quot; title: \u0026quot;~description\u0026quot; project_id: \u0026quot;$.reference_id\u0026quot; - Type: client.notify Method: ACTIONRESPONSE Attributes: type: success message: Created new todo, taking you to it. title: Wait for it\n!!! example \u0026ldquo;New task action JSON\u0026rdquo; json { \u0026quot;Actions\u0026quot;: [ { \u0026quot;Name\u0026quot;: \u0026quot;new_task\u0026quot;, \u0026quot;Label\u0026quot;: \u0026quot;New to do\u0026quot;, \u0026quot;OnType\u0026quot;: \u0026quot;project\u0026quot;, \u0026quot;InstanceOptional\u0026quot;: true, \u0026quot;InFields\u0026quot;: [ { \u0026quot;ColumnName\u0026quot;: \u0026quot;description\u0026quot;, \u0026quot;Name\u0026quot;: \u0026quot;Description\u0026quot;, \u0026quot;ColumnType\u0026quot;: \u0026quot;label\u0026quot; }, { \u0026quot;ColumnName\u0026quot;: \u0026quot;schedule\u0026quot;, \u0026quot;Name\u0026quot;: \u0026quot;Scheduled at\u0026quot;, \u0026quot;ColumnType\u0026quot;: \u0026quot;date\u0026quot; } ], \u0026quot;OutFields\u0026quot;: [ { \u0026quot;Type\u0026quot;: \u0026quot;todo\u0026quot;, \u0026quot;Method\u0026quot;: \u0026quot;POST\u0026quot;, \u0026quot;Attributes\u0026quot;: { \u0026quot;schedule\u0026quot;: \u0026quot;~schedule\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;~description\u0026quot;, \u0026quot;project_id\u0026quot;: \u0026quot;$.reference_id\u0026quot; } }, { \u0026quot;Type\u0026quot;: \u0026quot;client.notify\u0026quot;, \u0026quot;Method\u0026quot;: \u0026quot;ACTIONRESPONSE\u0026quot;, \u0026quot;Attributes\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;success\u0026quot;, \u0026quot;message\u0026quot;: \u0026quot;Created new todo, taking you to it.\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;Wait for it\u0026quot; } } ] } ] }\n"},{"uri":"http://localhost:1313/actions/outcomes/","title":"","tags":[],"description":"","content":"List of inbuilt outcomes An OutCome is one node in the chain of OutFields defined inside an action\nDatabase OutComes Get Get list of rows\nStructure:\n- Method: GET Type: \u0026lt;table_name\u0026gt;/ Attributes: page[\u0026#34;number\u0026#34;]: 1 page[\u0026#34;size\u0026#34;]: 10 query: \u0026#34;[Query]\u0026#34; filter: \u0026#34;\u0026#34; included_relations: relation_name, Get By Id Get a single row by reference_id\nStructure:\n- Method: GET_BY_ID Type: \u0026lt;table_name\u0026gt;/ Attributes: reference_id: \u0026lt;reference_id\u0026gt; included_relations: \u0026lt;reference_id\u0026gt; Create Create a new row\nStructure:\n- Method: POST Type: \u0026lt;table_name\u0026gt;/ Attributes: reference_id: \u0026lt;reference_id\u0026gt; ...ColumnNames: ...Values Update Update a row\nStructure:\n- Method: PUT Type: \u0026lt;table_name\u0026gt;/ Attributes: reference_id: \u0026lt;reference_id\u0026gt; ...ColumnNames: ...Values Delete Delete a row\nStructure:\n- Method: DELETE Type: \u0026lt;table_name\u0026gt;/ Attributes: reference_id: \u0026lt;reference_id\u0026gt; OpenAPI Specification OutComes Operations defined in any OpenAPI Spec uploaded can be used as an OutCome in the action\nEg:\nUpload Stripe OpenAPI Specification to integrartion table\nType: \u0026#34;stripeApi\u0026#34; # as defined when uploading openapi spec Method: \u0026#34;\u0026lt;operation_id\u0026gt;\u0026#34; Reference: operationResponseBody Attributes: # ...OperationParameters as defined in request schema ParamName: Value The response can be evaluated on later in further outcomes\nAttributes: response: $stripeApi.\u0026lt;operationNamee\u0026gt;.response statusCode: $stripeApi.\u0026lt;operationNamee\u0026gt;.statusCode responseBody: $operationResponseBody  System outcomes System OutComes are set of independent useful functions to build a variety of workflows\n- Method: EXECUTE Type: $network.request SkipInResponse: true Reference: validation Attributes: Url: https://ipnpb.sandbox.paypal.com/cgi-bin/webscr Method: POST Headers: Authorization: \u0026gt; !\u0026#39;Bearer \u0026#39; + token[0].access_token FormData: \u0026gt; !attributes[\u0026#39;cmd\u0026#39;] = \u0026#39;_notify-validate\u0026#39;; attributes cloud_store.files.import - Method: EXECUTE Type: cloud_store.files.import Attributes: table_name: \u0026#34;$.table_name\u0026#34; integration.install - Method: EXECUTE Type: integration.install Attributes: reference_id: \u0026#34;$.reference_id\u0026#34; client.file.download - Method: ACTIONRESPONSE Type: client.file.download Attributes: content: \u0026#34;!btoa(\u0026lt;file_content\u0026gt;)\u0026#34; contentType: \u0026lt;content_mimee_type\u0026gt; message: \u0026#34;!\u0026#39;A Message JS\u0026#39;\u0026#34; name: \u0026#34;\u0026lt;file_name\u0026gt;\u0026#34; acme.tls.generate - Method: EXECUTE Type: acme.tls.generate Attributes: certificate: \u0026#34;~subject\u0026#34; email: \u0026#34;~email\u0026#34; self.tls.generate - Method: EXECUTE Type: self.tls.generate Attributes: certificate: \u0026#34;~subject\u0026#34; otp.generate - Method: EXECUTE Type: otp.generate Attributes: email: \u0026#34;$.email\u0026#34; mobile: \u0026#34;~mobile_number\u0026#34; otp.login.verify - Method: EXECUTE Type: otp.login.verify Attributes: mobile: \u0026#34;~mobile_number\u0026#34; otp: \u0026#34;~otp\u0026#34; otp.generate - Method: EXECUTE Type: otp.generate Attributes: email: \u0026#34;~email\u0026#34; mobile: \u0026#34;~mobile_number\u0026#34; otp.login.verify - Method: EXECUTE Type: otp.login.verify Attributes: mobile: \u0026#34;~mobile_number\u0026#34; otp: \u0026#34;~otp\u0026#34; world.column.delete - Method: EXECUTE Type: world.column.delete Attributes: column_name: \u0026#34;~column_name\u0026#34; world_id: \u0026#34;$.reference_id\u0026#34; world.delete - Method: EXECUTE Type: world.delete Attributes: world_id: \u0026#34;$.reference_id\u0026#34; world.column.rename - Method: EXECUTE Type: world.column.rename Attributes: column_name: \u0026#34;~column_name\u0026#34; new_column_name: \u0026#34;~new_column_name\u0026#34; world_id: \u0026#34;$.reference_id\u0026#34; site.storage.sync - Method: EXECUTE Type: site.storage.sync Attributes: cloud_store_id: \u0026#34;$.cloud_store_id\u0026#34; path: \u0026#34;~path\u0026#34; site_id: \u0026#34;$.reference_id\u0026#34; column.storage.sync - Method: EXECUTE Type: column.storage.sync Attributes: column_name: \u0026#34;~column_name\u0026#34; table_name: \u0026#34;~table_name\u0026#34; mail.servers.sync - Method: EXECUTE Type: mail.servers.sync Attributes: { } system_json_schema_update - Method: EXECUTE Type: system_json_schema_update Attributes: json_schema: \u0026#39;!JSON.parse(\u0026#39;\u0026#39;[{\u0026#34;name\u0026#34;:\u0026#34;empty.json\u0026#34;,\u0026#34;file\u0026#34;:\u0026#34;data:application/json;base64,e30K\u0026#34;,\u0026#34;type\u0026#34;:\u0026#34;application/json\u0026#34;}]\u0026#39;\u0026#39;)\u0026#39; generate.random.data - Method: EXECUTE Type: generate.random.data Attributes: count: \u0026#34;~count\u0026#34; table_name: \u0026#34;~table_name\u0026#34; user_account_id: \u0026#34;$user.id\u0026#34; user_reference_id: \u0026#34;$user.reference_id\u0026#34; __data_export - Method: EXECUTE Type: __data_export Attributes: table_name: \u0026#34;$.table_name\u0026#34; world_reference_id: \u0026#34;$.reference_id\u0026#34; __csv_data_export - Method: EXECUTE Type: __csv_data_export Attributes: table_name: \u0026#34;$.table_name\u0026#34; world_reference_id: \u0026#34;$.reference_id\u0026#34; __data_import - Method: EXECUTE Type: __data_import Attributes: dump_file: \u0026#34;~dump_file\u0026#34; table_name: \u0026#34;$.table_name\u0026#34; truncate_before_insert: \u0026#34;~truncate_before_insert\u0026#34; user: \u0026#34;~user\u0026#34; world_reference_id: \u0026#34;$.reference_id\u0026#34; cloudstore.file.upload - Method: EXECUTE Type: cloudstore.file.upload Attributes: file: \u0026#34;~file\u0026#34; oauth_token_id: \u0026#34;$.oauth_token_id\u0026#34; path: \u0026#34;~path\u0026#34; root_path: \u0026#34;$.root_path\u0026#34; store_provider: \u0026#34;$.store_provider\u0026#34; cloudstore.site.create - Method: EXECUTE Type: cloudstore.site.create Attributes: cloud_store_id: \u0026#34;$.reference_id\u0026#34; hostname: \u0026#34;~hostname\u0026#34; oauth_token_id: \u0026#34;$.oauth_token_id\u0026#34; path: \u0026#34;~path\u0026#34; root_path: \u0026#34;$.root_path\u0026#34; site_type: \u0026#34;~site_type\u0026#34; store_provider: \u0026#34;$.store_provider\u0026#34; user_account_id: \u0026#34;$user.reference_id\u0026#34; cloudstore.file.delete - Method: EXECUTE Type: cloudstore.file.delete Attributes: oauth_token_id: \u0026#34;$.oauth_token_id\u0026#34; path: \u0026#34;~path\u0026#34; root_path: \u0026#34;$.root_path\u0026#34; store_provider: \u0026#34;$.store_provider\u0026#34; cloudstore.folder.create - Method: EXECUTE Type: cloudstore.folder.create Attributes: name: \u0026#34;~name\u0026#34; oauth_token_id: \u0026#34;$.oauth_token_id\u0026#34; path: \u0026#34;~path\u0026#34; root_path: \u0026#34;$.root_path\u0026#34; store_provider: \u0026#34;$.store_provider\u0026#34; cloudstore.path.move - Method: EXECUTE Type: cloudstore.path.move Attributes: destination: \u0026#34;~destination\u0026#34; oauth_token_id: \u0026#34;$.oauth_token_id\u0026#34; root_path: \u0026#34;$.root_path\u0026#34; source: \u0026#34;~source\u0026#34; store_provider: \u0026#34;$.store_provider\u0026#34; site.file.list - Method: EXECUTE Type: site.file.list Attributes: path: \u0026#34;~path\u0026#34; site_id: \u0026#34;$.reference_id\u0026#34; site.file.get - Method: EXECUTE Type: site.file.get Attributes: path: \u0026#34;~path\u0026#34; site_id: \u0026#34;$.reference_id\u0026#34; site.file.delete - Method: EXECUTE Type: site.file.delete Attributes: path: \u0026#34;~path\u0026#34; site_id: \u0026#34;$.reference_id\u0026#34; system_json_schema_update - Method: EXECUTE Type: system_json_schema_update Attributes: json_schema: \u0026#34;~schema_file\u0026#34; __upload_xlsx_file_to_entity - Method: EXECUTE Type: __upload_xlsx_file_to_entity Attributes: add_missing_columns: \u0026#34;~add_missing_columns\u0026#34; create_if_not_exists: \u0026#34;~create_if_not_exists\u0026#34; data_xls_file: \u0026#34;~data_xls_file\u0026#34; entity_name: \u0026#34;~entity_name\u0026#34; __upload_csv_file_to_entity - Method: EXECUTE Type: __upload_csv_file_to_entity Attributes: add_missing_columns: \u0026#34;~add_missing_columns\u0026#34; create_if_not_exists: \u0026#34;~create_if_not_exists\u0026#34; data_csv_file: \u0026#34;~data_csv_file\u0026#34; entity_name: \u0026#34;~entity_name\u0026#34; __download_cms_config - Method: EXECUTE Type: __download_cms_config Attributes: { } __become_admin - Method: EXECUTE Type: __become_admin Attributes: user: \u0026#34;~user\u0026#34; user_account_id: \u0026#34;$user.id\u0026#34; otp.generate - Method: EXECUTE Type: otp.generate Attributes: email: \u0026#34;~email\u0026#34; mobile: \u0026#34;~mobile\u0026#34; client.notify - Method: ACTIONRESPONSE Type: client.notify Attributes: message: Sign-up successful. Redirecting to sign in ### Success type: success client.redirect - Method: ACTIONRESPONSE Type: client.redirect Attributes: delay: 2000 location: \u0026#34;/auth/signin\u0026#34; window: self otp.generate - Method: EXECUTE Type: otp.generate Attributes: email: \u0026#34;$email\u0026#34; mail.send - Method: EXECUTE Type: mail.send Attributes: body: \u0026#39;Your verification code is: $otp.otp\u0026#39; from: no-reply@localhost subject: Request for password reset to: \u0026#34;~email\u0026#34; otp.login.verify - Method: EXECUTE Type: otp.login.verify Attributes: email: \u0026#34;~email\u0026#34; otp: \u0026#34;~otp\u0026#34; random.generate - Method: EXECUTE Type: random.generate Attributes: type: password user_account - Method: EXECUTE Type: user_account Attributes: password: \u0026#34;!newPassword.value\u0026#34; reference_id: \u0026#34;$user[0].reference_id\u0026#34; mail.send - Method: EXECUTE Type: mail.send Attributes: body: \u0026#39;Your new password is: $newPassword.value\u0026#39; from: no-reply@localhost subject: Request for password reset to: \u0026#34;~email\u0026#34; jwt.token - Method: EXECUTE Type: jwt.token Attributes: email: \u0026#34;~email\u0026#34; password: \u0026#34;~password\u0026#34; oauth.client.redirect - Method: EXECUTE Type: oauth.client.redirect Attributes: authenticator: \u0026#34;$.name\u0026#34; scope: \u0026#34;$.scope\u0026#34; oauth.login.response - Method: EXECUTE Type: oauth.login.response Attributes: authenticator: \u0026#34;~authenticator\u0026#34; code: \u0026#34;~code\u0026#34; state: \u0026#34;~state\u0026#34; user_account_id: \u0026#34;~user.id\u0026#34; user_reference_id: \u0026#34;~user.reference_id\u0026#34; oauth.profile.exchange - Method: EXECUTE Type: oauth.profile.exchange Attributes: authenticator: \u0026#34;~authenticator\u0026#34; profileUrl: \u0026#34;$connection[0].profile_url\u0026#34; token: \u0026#34;$auth.access_token\u0026#34; tokenInfoUrl: \u0026#34;$connection[0].token_url\u0026#34; jwt.token - Method: EXECUTE Type: jwt.token Attributes: email: \u0026#34;!profile.email || profile.emailAddress\u0026#34; skipPasswordCheck: true "},{"uri":"http://localhost:1313/features/enable-data-auditing/","title":"","tags":[],"description":"","content":"todo add documentation\n"},{"uri":"http://localhost:1313/features/enable-graphql/","title":"","tags":[],"description":"","content":"Graphql GraphQL endpoint provides access to all the data methods and actions in GraphQL format.\nEnable The GraphQL endpoint is disabled by default. If you want to use GraphQL endpoint, enable it first:\n!!! note Only an administrator user can set this config from the API.\nSet graphql.enable to true in config:\ncurl \\ -H \u0026#34;Authorization: Bearer TOKEN\u0026#34; \\ -X POST http://localhost:6336/_config/backend/graphql.enable --data true You can try to GET it again to verify if it was set or not (in case token is invalid or not set)\ncurl \\ -H \u0026#34;Authorization: Bearer TOKEN\u0026#34; \\ http://localhost:6336/_config/backend/graphql.enable You need to restart daptin for this setting to take effect. You can issue a restart by calling this:\ncurl \u0026#39;http://localhost:6336/action/world/restart_daptin\u0026#39; \\ -H \u0026#39;Authorization: Bearer TOKEN\u0026#39; \\ --data \u0026#39;{\u0026#34;attributes\u0026#34;:{}}\u0026#39; If everything goes well, the graphql endpoint should be enabled. You can test it\ncurl http://localhost:6336/graphql Response\n{ \u0026#34;data\u0026#34;: null, \u0026#34;errors\u0026#34;: [ { \u0026#34;message\u0026#34;: \u0026#34;Must provide an operation.\u0026#34;, \u0026#34;locations\u0026#34;: [] } ] } You can access the iGraphQL console at http://localhost:6336/graphql\n"},{"uri":"http://localhost:1313/features/enable-logs/","title":"","tags":[],"description":"","content":"todo add documentation\n"},{"uri":"http://localhost:1313/features/enable-multilingual-table/","title":"","tags":[],"description":"","content":"todo add documentation\n"},{"uri":"http://localhost:1313/features/enable-smtp-imap/","title":"","tags":[],"description":"","content":"todo add documentation\n"},{"uri":"http://localhost:1313/guides/todo_example/","title":"","tags":[],"description":"","content":""},{"uri":"http://localhost:1313/integrations/spec/","title":"","tags":[],"description":"","content":"API Spec integrations Import an OpenAPI v3 or v2 version specification in JSON or YAML format\nIntegrations are enabled by default;\nEnabled Integrations Operations defined inside the specification can be invoked as action outcomes\nCheckout actions to use these integration operations\n"},{"uri":"http://localhost:1313/reference/database_configuration/","title":"","tags":[],"description":"","content":""},{"uri":"http://localhost:1313/tables/create/","title":"","tags":[],"description":"","content":"Create table "}]